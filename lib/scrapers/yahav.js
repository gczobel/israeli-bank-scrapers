"use strict";

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.replace");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _moment = _interopRequireDefault(require("moment"));

var _constants = require("../constants");

var _elementsInteractions = require("../helpers/elements-interactions");

var _navigation = require("../helpers/navigation");

var _transactions = require("../transactions");

var _baseScraperWithBrowser = require("./base-scraper-with-browser");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const LOGIN_URL = 'https://login.yahav.co.il/login/';
const BASE_URL = 'https://digital.yahav.co.il/BaNCSDigitalUI/app/index.html#/';
const INVALID_DETAILS_SELECTOR = '.ui-dialog-buttons';
const BASE_WELCOME_URL = `${BASE_URL}main/home`;
const ACCOUNT_ID_SELECTOR = '.dropdown-dir .selected-item-top';
const DATE_FORMAT = 'DD/MM/YYYY';
const USER_ELEM = '#USER';
const PASSWD_ELEM = '#PASSWORD';
const NATIONALID_ELEM = '#NATIONAL_ID';

function getPossibleLoginResults(page) {
  // checkout file `base-scraper-with-browser.ts` for available result types
  const urls = {};
  urls[_baseScraperWithBrowser.LoginResults.Success] = [`${BASE_WELCOME_URL}`];
  urls[_baseScraperWithBrowser.LoginResults.InvalidPassword] = [async () => {
    return (0, _elementsInteractions.elementPresentOnPage)(page, `${INVALID_DETAILS_SELECTOR}`);
  }]; // TODO: add change password url/element

  urls[_baseScraperWithBrowser.LoginResults.ChangePassword] = [];
  return urls;
}

async function getAccountID(page) {
  const selectedSnifAccount = await page.$eval(`${ACCOUNT_ID_SELECTOR}`, option => {
    return option.innerText;
  });
  return selectedSnifAccount;
}

function getAmountData(amountStr) {
  const amountStrCopy = amountStr.replace(',', '');
  return parseFloat(amountStrCopy);
}

function getTxnAmount(txn) {
  const credit = getAmountData(txn.credit);
  const debit = getAmountData(txn.debit);
  return (Number.isNaN(credit) ? 0 : credit) - (Number.isNaN(debit) ? 0 : debit);
}

function convertTransactions(txns) {
  return txns.map(txn => {
    const convertedDate = (0, _moment.default)(txn.date, DATE_FORMAT).toISOString();
    const convertedAmount = getTxnAmount(txn);
    return {
      type: _transactions.TransactionTypes.Normal,
      identifier: txn.reference ? parseInt(txn.reference, 10) : undefined,
      date: convertedDate,
      processedDate: convertedDate,
      originalAmount: convertedAmount,
      originalCurrency: _constants.SHEKEL_CURRENCY,
      chargedAmount: convertedAmount,
      status: txn.status,
      description: txn.description,
      memo: txn.memo
    };
  });
}

function handleTransactionRow(txns, txnRow) {
  const div = txnRow.innerDivs; // Remove anything except digits.

  const regex = /\D+/gm;
  const tx = {
    date: div[1],
    reference: div[2].replace(regex, ''),
    memo: '',
    description: div[3],
    debit: div[4],
    credit: div[5],
    status: _transactions.TransactionStatuses.Completed
  };
  txns.push(tx);
}

async function sleep(ms) {
  await new Promise(resolve => setTimeout(resolve, ms));
}

async function getAccountTransactions(page) {
  // Wait for transactions.
  await (0, _elementsInteractions.waitUntilElementFound)(page, '.under-line-txn-table-header', true);
  const txns = [];
  const transactionsDivs = await (0, _elementsInteractions.pageEvalAll)(page, '.list-item-holder .entire-content-ctr', [], divs => {
    return divs.map(div => ({
      id: div.getAttribute('id') || '',
      innerDivs: Array.from(div.getElementsByTagName('div')).map(div => div.innerText)
    }));
  });

  for (const txnRow of transactionsDivs) {
    handleTransactionRow(txns, txnRow);
  }

  return convertTransactions(txns);
}

async function searchByDates(page)
/* , startDate: Moment */
{
  // TODO: Find a way to select the dates programatically.
  // Click on drop-down
  await (0, _elementsInteractions.clickButton)(page, '.statement-options .selected-item-top'); // Wait for drop-down creation

  await sleep(1000);
  let ddvalue = '';
  let item = 1;

  do {
    ddvalue = await page.$eval(`div.drop-down-item:nth-child(${item}) > div:nth-child(1) > span`, option => {
      return option.innerText;
    });

    if (ddvalue === '3 חודשים אחרונים') {
      break;
    }

    item += 1;
  } while (!_lodash.default.isEmpty(ddvalue)); // Click the 3 months transactions option


  await (0, _elementsInteractions.clickButton)(page, `div.drop-down-item:nth-child(${item}) > div:nth-child(1) > span`);
}

function filterTXByDate(txns, startDate) {
  const txs = _lodash.default.filter(txns, tx => {
    return startDate.isSameOrBefore(tx.date, 'day');
  });

  return txs;
}

async function fetchAccountData(page, startDate, accountID) {
  await searchByDates(page
  /* , startDate */
  );
  await (0, _elementsInteractions.waitUntilElementDisappear)(page, '.loading-bar-spinner');
  const accountTxs = await getAccountTransactions(page);
  const txns = filterTXByDate(accountTxs, startDate);
  return {
    accountNumber: accountID,
    txns
  };
}

async function fetchAccounts(page, startDate) {
  const accounts = []; // TODO: get more accounts

  const accountID = await getAccountID(page);
  const accountData = await fetchAccountData(page, startDate, accountID);
  accounts.push(accountData);
  return accounts;
}

async function waitReadinessForAll(page) {
  await (0, _elementsInteractions.waitUntilElementFound)(page, `${USER_ELEM}`, true);
  await (0, _elementsInteractions.waitUntilElementFound)(page, `${PASSWD_ELEM}`, true);
  await (0, _elementsInteractions.waitUntilElementFound)(page, `${NATIONALID_ELEM}`, true);
}

async function redirectOrDialog(page) {
  // Click on messages
  await (0, _navigation.waitForNavigation)(page);
  await (0, _elementsInteractions.waitUntilElementDisappear)(page, '.loading-bar-spinner');
  const hasMessage = await (0, _elementsInteractions.elementPresentOnPage)(page, '.messaging-links-container');

  if (hasMessage) {
    await (0, _elementsInteractions.clickButton)(page, '.link-1');
  }

  await (0, _elementsInteractions.waitUntilElementFound)(page, '.account-details', true);
  await (0, _elementsInteractions.waitUntilElementDisappear)(page, '.loading-bar-spinner');
}

class YahavScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
  getLoginOptions(credentials) {
    return {
      loginUrl: `${LOGIN_URL}`,
      fields: [{
        selector: `${USER_ELEM}`,
        value: credentials.username
      }, {
        selector: `${PASSWD_ELEM}`,
        value: credentials.password
      }, {
        selector: `${NATIONALID_ELEM}`,
        value: credentials.nationalID
      }],
      submitButtonSelector: '.submit',
      checkReadiness: async () => waitReadinessForAll(this.page),
      postAction: async () => redirectOrDialog(this.page),
      possibleResults: getPossibleLoginResults(this.page)
    };
  }

  async fetchData() {
    // Goto statements page
    await (0, _elementsInteractions.waitUntilElementFound)(this.page, '.account-details', true);
    await (0, _elementsInteractions.clickButton)(this.page, '.account-details');
    await (0, _elementsInteractions.waitUntilElementFound)(this.page, '.statement-options .selected-item-top', true);
    const defaultStartMoment = (0, _moment.default)().subtract(3, 'months').add(1, 'day');
    const startDate = this.options.startDate || defaultStartMoment.toDate();

    const startMoment = _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));

    const accounts = await fetchAccounts(this.page, startMoment);
    return {
      success: true,
      accounts
    };
  }

}

var _default = YahavScraper;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,