"use strict";

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.replace");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _baseScraperWithBrowser = require("./base-scraper-with-browser");

var _elementsInteractions = require("../helpers/elements-interactions");

var _constants = require("../constants");

var _transactions = require("../transactions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const BASE_URL = 'https://hb2.bankleumi.co.il';
const TRANSACTIONS_URL = `${BASE_URL}/eBanking/SO/SPA.aspx#/ts/BusinessAccountTrx?WidgetPar=1`;
const FILTERED_TRANSACTIONS_URL = `${BASE_URL}/ChannelWCF/Broker.svc/ProcessRequest?moduleName=UC_SO_27_GetBusinessAccountTrx`;
const DATE_FORMAT = 'DD.MM.YY';
const ACCOUNT_BLOCKED_MSG = 'המנוי חסום';

function getPossibleLoginResults() {
  const urls = {
    [_baseScraperWithBrowser.LoginResults.Success]: [/ebanking\/SO\/SPA.aspx/i],
    [_baseScraperWithBrowser.LoginResults.InvalidPassword]: [/InternalSite\/CustomUpdate\/leumi\/LoginPage.ASP/],
    [_baseScraperWithBrowser.LoginResults.AccountBlocked]: [async options => {
      if (!options || !options.page) {
        throw new Error('missing page options argument');
      }

      const errorMessage = await (0, _elementsInteractions.pageEvalAll)(options.page, '.errHeader', [], label => {
        var _ref;

        return (_ref = label[0]) === null || _ref === void 0 ? void 0 : _ref.innerText;
      });
      return errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.startsWith(ACCOUNT_BLOCKED_MSG);
    }],
    [_baseScraperWithBrowser.LoginResults.ChangePassword]: ['https://hb2.bankleumi.co.il/authenticate']
  };
  return urls;
}

function createLoginFields(credentials) {
  return [{
    selector: '#wtr_uid',
    value: credentials.username
  }, {
    selector: '#wtr_password',
    value: credentials.password
  }];
}

function extractTransactionsFromPage(transactions, status) {
  if (transactions === null || transactions.length === 0) {
    return [];
  }

  const result = transactions.map(rawTransaction => {
    const newTransaction = {
      status,
      type: _transactions.TransactionTypes.Normal,
      date: rawTransaction.DateUTC,
      processedDate: rawTransaction.DateUTC,
      description: rawTransaction.Description || '',
      identifier: rawTransaction.ReferenceNumberLong,
      memo: rawTransaction.AdditionalData || '',
      originalCurrency: _constants.SHEKEL_CURRENCY,
      chargedAmount: rawTransaction.Amount,
      originalAmount: rawTransaction.Amount
    };
    return newTransaction;
  });
  return result;
}

function hangProcess(timeout) {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve();
    }, timeout);
  });
}

async function clickByXPath(page, xpath) {
  await page.waitForXPath(xpath, {
    timeout: 30000,
    visible: true
  });
  const elm = await page.$x(xpath);
  await elm[0].click();
}

function removeSpecialCharacters(str) {
  return str.replace(/[^0-9/-]/g, '');
}

async function fetchTransactionsForAccount(page, startDate, accountId) {
  // DEVELOPER NOTICE the account number received from the server is being altered at
  // runtime for some accounts after 1-2 seconds so we need to hang the process for a short while.
  await hangProcess(4000);
  await (0, _elementsInteractions.waitUntilElementFound)(page, 'button[title="חיפוש מתקדם"]', true);
  await (0, _elementsInteractions.clickButton)(page, 'button[title="חיפוש מתקדם"]');
  await (0, _elementsInteractions.waitUntilElementFound)(page, 'bll-radio-button', true);
  await (0, _elementsInteractions.clickButton)(page, 'bll-radio-button:not([checked])');
  await (0, _elementsInteractions.waitUntilElementFound)(page, 'input[formcontrolname="txtInputFrom"]', true);
  await (0, _elementsInteractions.fillInput)(page, 'input[formcontrolname="txtInputFrom"]', startDate.format(DATE_FORMAT)); // we must blur the from control otherwise the search will use the previous value

  await page.focus("button[aria-label='סנן']");
  await (0, _elementsInteractions.clickButton)(page, "button[aria-label='סנן']");
  const finalResponse = await page.waitForResponse(response => {
    return response.url() === FILTERED_TRANSACTIONS_URL && response.request().method() === 'POST';
  });
  const responseJson = await finalResponse.json();
  const accountNumber = accountId.replace('/', '_').replace(/[^\d-_]/g, '');
  const response = JSON.parse(responseJson.jsonResp);
  const pendingTransactions = response.TodayTransactionsItems;
  const transactions = response.HistoryTransactionsItems;
  const balance = response.BalanceDisplay ? parseFloat(response.BalanceDisplay) : undefined;
  const pendingTxns = extractTransactionsFromPage(pendingTransactions, _transactions.TransactionStatuses.Pending);
  const completedTxns = extractTransactionsFromPage(transactions, _transactions.TransactionStatuses.Completed);
  const txns = [...pendingTxns, ...completedTxns];
  return {
    accountNumber,
    balance,
    txns
  };
}

async function fetchTransactions(page, startDate) {
  const accounts = []; // DEVELOPER NOTICE the account number received from the server is being altered at
  // runtime for some accounts after 1-2 seconds so we need to hang the process for a short while.

  await hangProcess(4000);
  const accountsIds = await page.evaluate(() => Array.from(document.querySelectorAll('app-masked-number-combo span.display-number-li'), e => e.textContent)); // due to a bug, the altered value might include undesired signs like & that should be removed

  if (!accountsIds.length) {
    throw new Error('Failed to extract or parse the account number');
  }

  for (const accountId of accountsIds) {
    if (accountsIds.length > 1) {
      // get list of accounts and check accountId
      await clickByXPath(page, '//*[contains(@class, "number") and contains(@class, "combo-inner")]');
      await clickByXPath(page, `//span[contains(text(), '${accountId}')]`);
    }

    accounts.push((await fetchTransactionsForAccount(page, startDate, removeSpecialCharacters(accountId))));
  }

  return accounts;
}

async function waitForPostLogin(page) {
  // TODO check for condition to provide new password
  await Promise.race([(0, _elementsInteractions.waitUntilElementFound)(page, 'div.leumi-container', true), (0, _elementsInteractions.waitUntilElementFound)(page, '#BodyContent_ctl00_loginErrMsg', true), (0, _elementsInteractions.waitUntilElementFound)(page, '.ErrMsg', true), (0, _elementsInteractions.waitUntilElementFound)(page, 'form[action="/changepassword"]', true)]);
}

class LeumiScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
  getLoginOptions(credentials) {
    return {
      loginUrl: `${BASE_URL}`,
      fields: createLoginFields(credentials),
      submitButtonSelector: '#enter',
      postAction: async () => waitForPostLogin(this.page),
      possibleResults: getPossibleLoginResults()
    };
  }

  async fetchData() {
    const defaultStartMoment = (0, _moment.default)().subtract(1, 'years').add(1, 'day');
    const startDate = this.options.startDate || defaultStartMoment.toDate();

    const startMoment = _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));

    await this.navigateTo(TRANSACTIONS_URL);
    const accounts = await fetchTransactions(this.page, startMoment);
    return {
      success: true,
      accounts
    };
  }

}

var _default = LeumiScraper;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,