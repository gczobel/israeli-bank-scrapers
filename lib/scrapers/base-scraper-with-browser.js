"use strict";

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseScraperWithBrowser = exports.LoginResults = void 0;

var _puppeteer = _interopRequireDefault(require("puppeteer"));

var _baseScraper = require("./base-scraper");

var _navigation = require("../helpers/navigation");

var _elementsInteractions = require("../helpers/elements-interactions");

var _debug = require("../helpers/debug");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const VIEWPORT_WIDTH = 1024;
const VIEWPORT_HEIGHT = 768;
const OK_STATUS = 200;
const debug = (0, _debug.getDebug)('base-scraper-with-browser');
var LoginBaseResults;

(function (LoginBaseResults) {
  LoginBaseResults["Success"] = "SUCCESS";
  LoginBaseResults["UnknownError"] = "UNKNOWN_ERROR";
})(LoginBaseResults || (LoginBaseResults = {}));

const {
  Timeout,
  Generic,
  General
} = _baseScraper.ScraperErrorTypes,
      rest = _objectWithoutProperties(_baseScraper.ScraperErrorTypes, ["Timeout", "Generic", "General"]);

const LoginResults = _objectSpread({}, rest, {}, LoginBaseResults);

exports.LoginResults = LoginResults;

async function getKeyByValue(object, value, page) {
  const keys = Object.keys(object);

  for (const key of keys) {
    // @ts-ignore
    const conditions = object[key];

    for (const condition of conditions) {
      let result = false;

      if (condition instanceof RegExp) {
        result = condition.test(value);
      } else if (typeof condition === 'function') {
        result = await condition({
          page,
          value
        });
      } else {
        result = value.toLowerCase() === condition.toLowerCase();
      }

      if (result) {
        // @ts-ignore
        return Promise.resolve(key);
      }
    }
  }

  return Promise.resolve(LoginResults.UnknownError);
}

function handleLoginResult(scraper, loginResult) {
  switch (loginResult) {
    case LoginResults.Success:
      scraper.emitProgress(_baseScraper.ScaperProgressTypes.LoginSuccess);
      return {
        success: true
      };

    case LoginResults.InvalidPassword:
    case LoginResults.UnknownError:
      scraper.emitProgress(_baseScraper.ScaperProgressTypes.LoginFailed);
      return {
        success: false,
        errorType: loginResult === LoginResults.InvalidPassword ? _baseScraper.ScraperErrorTypes.InvalidPassword : _baseScraper.ScraperErrorTypes.General,
        errorMessage: `Login failed with ${loginResult} error`
      };

    case LoginResults.ChangePassword:
      scraper.emitProgress(_baseScraper.ScaperProgressTypes.ChangePassword);
      return {
        success: false,
        errorType: _baseScraper.ScraperErrorTypes.ChangePassword
      };

    default:
      throw new Error(`unexpected login result "${loginResult}"`);
  }
}

function createGeneralError() {
  return {
    success: false,
    errorType: _baseScraper.ScraperErrorTypes.General
  };
}

class BaseScraperWithBrowser extends _baseScraper.BaseScraper {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "browser", void 0);

    _defineProperty(this, "page", void 0);
  }

  async initialize() {
    debug('initialize scraper');
    this.emitProgress(_baseScraper.ScaperProgressTypes.Initializing);
    let env;

    if (this.options.verbose) {
      env = _objectSpread({
        DEBUG: '*'
      }, process.env);
    }

    if (typeof this.options.browser !== 'undefined' && this.options.browser !== null) {
      debug('use custom browser instance provided in options');
      this.browser = this.options.browser;
    } else {
      const executablePath = this.options.executablePath || undefined;
      const args = this.options.args || [];
      const headless = !this.options.showBrowser;
      debug(`launch a browser with headless mode = ${headless}`);
      this.browser = await _puppeteer.default.launch({
        env,
        headless,
        executablePath,
        args
      });
    }

    if (this.options.prepareBrowser) {
      debug('execute \'prepareBrowser\' interceptor provided in options');
      await this.options.prepareBrowser(this.browser);
    }

    if (!this.browser) {
      debug('failed to initiate a browser, exit');
      return;
    }

    const pages = await this.browser.pages();

    if (pages.length) {
      debug('browser has already pages open, use the first one');
      [this.page] = pages;
    } else {
      debug('create a new browser page');
      this.page = await this.browser.newPage();
    }

    if (this.options.preparePage) {
      debug('execute \'preparePage\' interceptor provided in options');
      await this.options.preparePage(this.page);
    }

    debug(`set viewport to width ${VIEWPORT_WIDTH}, height ${VIEWPORT_HEIGHT}`);
    await this.page.setViewport({
      width: VIEWPORT_WIDTH,
      height: VIEWPORT_HEIGHT
    });
  }

  async navigateTo(url, page, timeout) {
    const pageToUse = page || this.page;

    if (!pageToUse) {
      return;
    }

    const options = _objectSpread({}, timeout === null ? null : {
      timeout
    });

    const response = await pageToUse.goto(url, options); // note: response will be null when navigating to same url while changing the hash part. the condition below will always accept null as valid result.

    if (response !== null && (response === undefined || response.status() !== OK_STATUS)) {
      throw new Error(`Error while trying to navigate to url ${url}`);
    }
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars


  getLoginOptions(_credentials) {
    throw new Error(`getLoginOptions() is not created in ${this.options.companyId}`);
  }

  async fillInputs(pageOrFrame, fields) {
    const modified = [...fields];
    const input = modified.shift();

    if (!input) {
      return;
    }

    await (0, _elementsInteractions.fillInput)(pageOrFrame, input.selector, input.value);

    if (modified.length) {
      await this.fillInputs(pageOrFrame, modified);
    }
  }

  async login(credentials) {
    if (!credentials || !this.page) {
      return createGeneralError();
    }

    debug('execute login process');
    const loginOptions = this.getLoginOptions(credentials);

    if (loginOptions.userAgent) {
      debug('set custom user agent provided in options');
      await this.page.setUserAgent(loginOptions.userAgent);
    }

    debug('navigate to login url');
    await this.navigateTo(loginOptions.loginUrl);

    if (loginOptions.checkReadiness) {
      debug('execute \'checkReadiness\' interceptor provided in login options');
      await loginOptions.checkReadiness();
    } else {
      debug('wait until submit button is available');
      await (0, _elementsInteractions.waitUntilElementFound)(this.page, loginOptions.submitButtonSelector);
    }

    let loginFrameOrPage = this.page;

    if (loginOptions.preAction) {
      debug('execute \'preAction\' interceptor provided in login options');
      loginFrameOrPage = (await loginOptions.preAction()) || this.page;
    }

    debug('fill login components input with relevant values');
    await this.fillInputs(loginFrameOrPage, loginOptions.fields);
    debug('click on login submit button');
    await (0, _elementsInteractions.clickButton)(loginFrameOrPage, loginOptions.submitButtonSelector);
    this.emitProgress(_baseScraper.ScaperProgressTypes.LoggingIn);

    if (loginOptions.postAction) {
      debug('execute \'postAction\' interceptor provided in login options');
      await loginOptions.postAction();
    } else {
      debug('wait for page navigation');
      await (0, _navigation.waitForNavigation)(this.page);
    }

    debug('check login result');
    const current = await (0, _navigation.getCurrentUrl)(this.page, true);
    const loginResult = await getKeyByValue(loginOptions.possibleResults, current, this.page);
    debug(`handle login results ${loginResult}`);
    return handleLoginResult(this, loginResult);
  }

  async terminate(_success) {
    debug(`terminating browser with success = ${_success}`);
    this.emitProgress(_baseScraper.ScaperProgressTypes.Terminating);

    if (!_success && !!this.options.storeFailureScreenShotPath) {
      debug(`create a snapshot before terminated in ${this.options.storeFailureScreenShotPath}`);
      await this.page.screenshot({
        path: this.options.storeFailureScreenShotPath,
        fullPage: true
      });
    }

    if (!this.browser) {
      return;
    }

    await this.browser.close();
  }

}

exports.BaseScraperWithBrowser = BaseScraperWithBrowser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,