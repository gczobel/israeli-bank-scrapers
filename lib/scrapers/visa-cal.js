"use strict";

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _buildUrl = _interopRequireDefault(require("build-url"));

var _moment = _interopRequireDefault(require("moment"));

var _baseScraper = require("./base-scraper");

var _constants = require("../constants");

var _fetch = require("../helpers/fetch");

var _transactions = require("../helpers/transactions");

var _transactions2 = require("../transactions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const BASE_URL = 'https://cal4u.cal-online.co.il/Cal4U';
const AUTH_URL = 'https://connect.cal-online.co.il/api/authentication/login';
const DATE_FORMAT = 'DD/MM/YYYY';
const PASSWORD_EXPIRED_MSGS = ['תוקף הסיסמא פג', 'אנו מתנצלים, עקב תקלה לא ניתן לבצע את הפעולה כעת.|ניתן לנסות שנית במועד מאוחר יותר'];
const INVALID_CREDENTIALS = 'שם המשתמש או הסיסמה שהוזנו שגויים';
const NO_DATA_FOUND_MSG = 'לא נמצאו חיובים לטווח תאריכים זה';
const ACCOUNT_BLOCKED_MSG = 'הכניסה למנוי נחסמה עקב ריבוי נסיונות כושלים. לשחרור המנוי באפשרותך לחדש סיסמה על ידי בחירת שכחתי שם משתמש סיסמה';
const NORMAL_TYPE_CODE = '5';
const REFUND_TYPE_CODE = '6';
const WITHDRAWAL_TYPE_CODE = '7';
const INSTALLMENTS_TYPE_CODE = '8';
const CANCEL_TYPE_CODE = '25';
const WITHDRAWAL_TYPE_CODE_2 = '27';
const DEBIT_TYPE_CODE = '41';
const DEBIT_REFUND_TYPE_CODE = '42';
const CREDIT_PAYMENTS_CODE = '59';
const MEMBERSHIP_FEE_TYPE_CODE = '67';
const SERVICES_REFUND_TYPE_CODE = '71';
const SERVICES_TYPE_CODE = '72';
const REFUND_TYPE_CODE_2 = '76';
const CANCEL_PAYMENT_CODE = '86';
const HEADER_SITE = {
  'X-Site-Id': '8D37DF16-5812-4ACD-BAE7-CD1A5BFA2206'
};

function getBankDebitsUrl(accountId) {
  const toDate = (0, _moment.default)().add(2, 'months');
  const fromDate = (0, _moment.default)().subtract(6, 'months');
  return (0, _buildUrl.default)(BASE_URL, {
    path: `CalBankDebits/${accountId}`,
    queryParams: {
      DebitLevel: 'A',
      DebitType: '2',
      FromMonth: (fromDate.month() + 1).toString().padStart(2, '0'),
      FromYear: fromDate.year().toString(),
      ToMonth: (toDate.month() + 1).toString().padStart(2, '0'),
      ToYear: toDate.year().toString()
    }
  });
}

function getTransactionsUrl(cardId, debitDate) {
  return (0, _buildUrl.default)(BASE_URL, {
    path: `CalTransactions/${cardId}`,
    queryParams: {
      ToDate: debitDate,
      FromDate: debitDate
    }
  });
}

function convertTransactionType(txnType) {
  switch (txnType) {
    case NORMAL_TYPE_CODE:
    case REFUND_TYPE_CODE:
    case CANCEL_TYPE_CODE:
    case WITHDRAWAL_TYPE_CODE:
    case WITHDRAWAL_TYPE_CODE_2:
    case REFUND_TYPE_CODE_2:
    case CANCEL_PAYMENT_CODE:
    case SERVICES_REFUND_TYPE_CODE:
    case MEMBERSHIP_FEE_TYPE_CODE:
    case SERVICES_TYPE_CODE:
    case DEBIT_TYPE_CODE:
    case DEBIT_REFUND_TYPE_CODE:
      return _transactions2.TransactionTypes.Normal;

    case INSTALLMENTS_TYPE_CODE:
    case CREDIT_PAYMENTS_CODE:
      return _transactions2.TransactionTypes.Installments;

    default:
      throw new Error(`unknown transaction type ${txnType}`);
  }
}

function convertCurrency(currency) {
  switch (currency) {
    case _constants.SHEKEL_CURRENCY_SYMBOL:
      return _constants.SHEKEL_CURRENCY;

    case _constants.DOLLAR_CURRENCY_SYMBOL:
      return _constants.DOLLAR_CURRENCY;

    default:
      return currency;
  }
}

function getInstallmentsInfo(txn) {
  if (!txn.CurrentPayment || txn.CurrentPayment === '0') {
    return null;
  }

  return {
    number: parseInt(txn.CurrentPayment, 10),
    total: txn.TotalPayments ? parseInt(txn.TotalPayments, 10) : Number.NaN
  };
}

function getTransactionMemo(txn) {
  const {
    TransType: txnType,
    TransTypeDesc: txnTypeDescription
  } = txn;

  switch (txnType) {
    case NORMAL_TYPE_CODE:
      return txnTypeDescription === 'רכישה רגילה' ? '' : txnTypeDescription;

    case INSTALLMENTS_TYPE_CODE:
      return `תשלום ${txn.CurrentPayment} מתוך ${txn.TotalPayments}`;

    default:
      return txn.TransTypeDesc;
  }
}

function convertTransactions(txns) {
  return txns.map(txn => {
    return {
      type: convertTransactionType(txn.TransType),
      identifier: parseInt(txn.Id, 10),
      date: (0, _moment.default)(txn.Date, DATE_FORMAT).toISOString(),
      processedDate: (0, _moment.default)(txn.DebitDate, DATE_FORMAT).toISOString(),
      originalAmount: -txn.Amount.Value,
      originalCurrency: convertCurrency(txn.Amount.Symbol),
      chargedAmount: -txn.DebitAmount.Value,
      description: txn.MerchantDetails.Name,
      memo: getTransactionMemo(txn),
      installments: getInstallmentsInfo(txn) || undefined,
      status: _transactions2.TransactionStatuses.Completed
    };
  });
}

function prepareTransactions(txns, startMoment, combineInstallments) {
  let clonedTxns = Array.from(txns);

  if (!combineInstallments) {
    clonedTxns = (0, _transactions.fixInstallments)(clonedTxns);
  }

  clonedTxns = (0, _transactions.sortTransactionsByDate)(clonedTxns);
  clonedTxns = (0, _transactions.filterOldTransactions)(clonedTxns, startMoment, combineInstallments);
  return clonedTxns;
}

async function getBankDebits(authHeader, accountId) {
  const bankDebitsUrl = getBankDebitsUrl(accountId);
  return (0, _fetch.fetchGet)(bankDebitsUrl, authHeader);
}

async function getTransactionsNextPage(authHeader) {
  const hasNextPageUrl = `${BASE_URL}/CalTransNextPage`;
  return (0, _fetch.fetchGet)(hasNextPageUrl, authHeader);
}

async function fetchTxns(authHeader, cardId, debitDates) {
  const txns = [];

  for (const date of debitDates) {
    const fetchTxnUrl = getTransactionsUrl(cardId, date);
    let txnResponse = await (0, _fetch.fetchGet)(fetchTxnUrl, authHeader);

    if (txnResponse.Transactions) {
      txns.push(...txnResponse.Transactions);
    }

    while (txnResponse.HasNextPage) {
      txnResponse = await getTransactionsNextPage(authHeader);

      if (txnResponse.Transactions != null) {
        txns.push(...txnResponse.Transactions);
      }
    }
  }

  return txns;
}

async function getTxnsOfCard(authHeader, card, bankDebits) {
  const cardId = card.Id;
  const cardDebitDates = bankDebits.filter(bankDebit => {
    return bankDebit.CardId === cardId;
  }).map(cardDebit => {
    return cardDebit.Date;
  });
  return fetchTxns(authHeader, cardId, cardDebitDates);
}

async function getTransactionsForAllAccounts(authHeader, startMoment, options) {
  const cardsByAccountUrl = `${BASE_URL}/CardsByAccounts`;
  const banksResponse = await (0, _fetch.fetchGet)(cardsByAccountUrl, authHeader);

  if (_lodash.default.get(banksResponse, 'Response.Status.Succeeded')) {
    const accounts = [];

    for (let i = 0; i < banksResponse.BankAccounts.length; i += 1) {
      const bank = banksResponse.BankAccounts[i];
      const bankDebits = await getBankDebits(authHeader, bank.AccountID); // Check that the bank has an active card to scrape

      if (bank.Cards.some(card => card.IsEffectiveInd)) {
        if (_lodash.default.get(bankDebits, 'Response.Status.Succeeded')) {
          for (let j = 0; j < bank.Cards.length; j += 1) {
            const rawTxns = await getTxnsOfCard(authHeader, bank.Cards[j], bankDebits.Debits);

            if (rawTxns) {
              let txns = convertTransactions(rawTxns);
              txns = prepareTransactions(txns, startMoment, options.combineInstallments || false);
              const result = {
                accountNumber: bank.Cards[j].LastFourDigits,
                txns
              };
              accounts.push(result);
            }
          }
        } else {
          const {
            Description,
            Message
          } = bankDebits.Response.Status;

          if (Message !== NO_DATA_FOUND_MSG) {
            const message = `${Description}. ${Message}`;
            throw new Error(message);
          }
        }
      }
    }

    return {
      success: true,
      accounts
    };
  }

  return {
    success: false
  };
}

class VisaCalScraper extends _baseScraper.BaseScraper {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "authHeader", '');
  }

  async login(credentials) {
    const authRequest = {
      username: credentials.username,
      password: credentials.password,
      rememberMe: null
    };
    this.emitProgress(_baseScraper.ScaperProgressTypes.LoggingIn);
    const authResponse = await (0, _fetch.fetchPost)(AUTH_URL, authRequest, HEADER_SITE);

    if (PASSWORD_EXPIRED_MSGS.includes(authResponse)) {
      return {
        success: false,
        errorType: _baseScraper.ScraperErrorTypes.ChangePassword
      };
    }

    if (authResponse === INVALID_CREDENTIALS) {
      return {
        success: false,
        errorType: _baseScraper.ScraperErrorTypes.InvalidPassword
      };
    }

    if (authResponse === ACCOUNT_BLOCKED_MSG) {
      return {
        success: false,
        errorType: _baseScraper.ScraperErrorTypes.AccountBlocked
      };
    }

    if (!authResponse || !authResponse.token) {
      return {
        success: false,
        errorType: _baseScraper.ScraperErrorTypes.General,
        errorMessage: `No token found in authResponse: ${JSON.stringify(authResponse)}`
      };
    }

    this.authHeader = `CALAuthScheme ${authResponse.token}`;
    this.emitProgress(_baseScraper.ScaperProgressTypes.LoginSuccess);
    return {
      success: true
    };
  }

  async fetchData() {
    const defaultStartMoment = (0, _moment.default)().subtract(1, 'years');
    const startDate = this.options.startDate || defaultStartMoment.toDate();

    const startMoment = _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));

    const authHeader = _objectSpread({
      Authorization: this.authHeader
    }, HEADER_SITE);

    return getTransactionsForAllAccounts(authHeader, startMoment, this.options);
  }

}

var _default = VisaCalScraper;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JhcGVycy92aXNhLWNhbC50cyJdLCJuYW1lcyI6WyJCQVNFX1VSTCIsIkFVVEhfVVJMIiwiREFURV9GT1JNQVQiLCJQQVNTV09SRF9FWFBJUkVEX01TR1MiLCJJTlZBTElEX0NSRURFTlRJQUxTIiwiTk9fREFUQV9GT1VORF9NU0ciLCJBQ0NPVU5UX0JMT0NLRURfTVNHIiwiTk9STUFMX1RZUEVfQ09ERSIsIlJFRlVORF9UWVBFX0NPREUiLCJXSVRIRFJBV0FMX1RZUEVfQ09ERSIsIklOU1RBTExNRU5UU19UWVBFX0NPREUiLCJDQU5DRUxfVFlQRV9DT0RFIiwiV0lUSERSQVdBTF9UWVBFX0NPREVfMiIsIkRFQklUX1RZUEVfQ09ERSIsIkRFQklUX1JFRlVORF9UWVBFX0NPREUiLCJDUkVESVRfUEFZTUVOVFNfQ09ERSIsIk1FTUJFUlNISVBfRkVFX1RZUEVfQ09ERSIsIlNFUlZJQ0VTX1JFRlVORF9UWVBFX0NPREUiLCJTRVJWSUNFU19UWVBFX0NPREUiLCJSRUZVTkRfVFlQRV9DT0RFXzIiLCJDQU5DRUxfUEFZTUVOVF9DT0RFIiwiSEVBREVSX1NJVEUiLCJnZXRCYW5rRGViaXRzVXJsIiwiYWNjb3VudElkIiwidG9EYXRlIiwiYWRkIiwiZnJvbURhdGUiLCJzdWJ0cmFjdCIsInBhdGgiLCJxdWVyeVBhcmFtcyIsIkRlYml0TGV2ZWwiLCJEZWJpdFR5cGUiLCJGcm9tTW9udGgiLCJtb250aCIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJGcm9tWWVhciIsInllYXIiLCJUb01vbnRoIiwiVG9ZZWFyIiwiZ2V0VHJhbnNhY3Rpb25zVXJsIiwiY2FyZElkIiwiZGViaXREYXRlIiwiVG9EYXRlIiwiRnJvbURhdGUiLCJjb252ZXJ0VHJhbnNhY3Rpb25UeXBlIiwidHhuVHlwZSIsIlRyYW5zYWN0aW9uVHlwZXMiLCJOb3JtYWwiLCJJbnN0YWxsbWVudHMiLCJFcnJvciIsImNvbnZlcnRDdXJyZW5jeSIsImN1cnJlbmN5IiwiU0hFS0VMX0NVUlJFTkNZX1NZTUJPTCIsIlNIRUtFTF9DVVJSRU5DWSIsIkRPTExBUl9DVVJSRU5DWV9TWU1CT0wiLCJET0xMQVJfQ1VSUkVOQ1kiLCJnZXRJbnN0YWxsbWVudHNJbmZvIiwidHhuIiwiQ3VycmVudFBheW1lbnQiLCJudW1iZXIiLCJwYXJzZUludCIsInRvdGFsIiwiVG90YWxQYXltZW50cyIsIk51bWJlciIsIk5hTiIsImdldFRyYW5zYWN0aW9uTWVtbyIsIlRyYW5zVHlwZSIsIlRyYW5zVHlwZURlc2MiLCJ0eG5UeXBlRGVzY3JpcHRpb24iLCJjb252ZXJ0VHJhbnNhY3Rpb25zIiwidHhucyIsIm1hcCIsInR5cGUiLCJpZGVudGlmaWVyIiwiSWQiLCJkYXRlIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwicHJvY2Vzc2VkRGF0ZSIsIkRlYml0RGF0ZSIsIm9yaWdpbmFsQW1vdW50IiwiQW1vdW50IiwiVmFsdWUiLCJvcmlnaW5hbEN1cnJlbmN5IiwiU3ltYm9sIiwiY2hhcmdlZEFtb3VudCIsIkRlYml0QW1vdW50IiwiZGVzY3JpcHRpb24iLCJNZXJjaGFudERldGFpbHMiLCJOYW1lIiwibWVtbyIsImluc3RhbGxtZW50cyIsInVuZGVmaW5lZCIsInN0YXR1cyIsIlRyYW5zYWN0aW9uU3RhdHVzZXMiLCJDb21wbGV0ZWQiLCJwcmVwYXJlVHJhbnNhY3Rpb25zIiwic3RhcnRNb21lbnQiLCJjb21iaW5lSW5zdGFsbG1lbnRzIiwiY2xvbmVkVHhucyIsIkFycmF5IiwiZnJvbSIsImdldEJhbmtEZWJpdHMiLCJhdXRoSGVhZGVyIiwiYmFua0RlYml0c1VybCIsImdldFRyYW5zYWN0aW9uc05leHRQYWdlIiwiaGFzTmV4dFBhZ2VVcmwiLCJmZXRjaFR4bnMiLCJkZWJpdERhdGVzIiwiZmV0Y2hUeG5VcmwiLCJ0eG5SZXNwb25zZSIsIlRyYW5zYWN0aW9ucyIsInB1c2giLCJIYXNOZXh0UGFnZSIsImdldFR4bnNPZkNhcmQiLCJjYXJkIiwiYmFua0RlYml0cyIsImNhcmREZWJpdERhdGVzIiwiZmlsdGVyIiwiYmFua0RlYml0IiwiQ2FyZElkIiwiY2FyZERlYml0IiwiZ2V0VHJhbnNhY3Rpb25zRm9yQWxsQWNjb3VudHMiLCJvcHRpb25zIiwiY2FyZHNCeUFjY291bnRVcmwiLCJiYW5rc1Jlc3BvbnNlIiwiXyIsImdldCIsImFjY291bnRzIiwiaSIsIkJhbmtBY2NvdW50cyIsImxlbmd0aCIsImJhbmsiLCJBY2NvdW50SUQiLCJDYXJkcyIsInNvbWUiLCJJc0VmZmVjdGl2ZUluZCIsImoiLCJyYXdUeG5zIiwiRGViaXRzIiwicmVzdWx0IiwiYWNjb3VudE51bWJlciIsIkxhc3RGb3VyRGlnaXRzIiwiRGVzY3JpcHRpb24iLCJNZXNzYWdlIiwiUmVzcG9uc2UiLCJTdGF0dXMiLCJtZXNzYWdlIiwic3VjY2VzcyIsIlZpc2FDYWxTY3JhcGVyIiwiQmFzZVNjcmFwZXIiLCJsb2dpbiIsImNyZWRlbnRpYWxzIiwiYXV0aFJlcXVlc3QiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwicmVtZW1iZXJNZSIsImVtaXRQcm9ncmVzcyIsIlNjYXBlclByb2dyZXNzVHlwZXMiLCJMb2dnaW5nSW4iLCJhdXRoUmVzcG9uc2UiLCJpbmNsdWRlcyIsImVycm9yVHlwZSIsIlNjcmFwZXJFcnJvclR5cGVzIiwiQ2hhbmdlUGFzc3dvcmQiLCJJbnZhbGlkUGFzc3dvcmQiLCJBY2NvdW50QmxvY2tlZCIsInRva2VuIiwiR2VuZXJhbCIsImVycm9yTWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJMb2dpblN1Y2Nlc3MiLCJmZXRjaERhdGEiLCJkZWZhdWx0U3RhcnRNb21lbnQiLCJzdGFydERhdGUiLCJtb21lbnQiLCJtYXgiLCJBdXRob3JpemF0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBOztBQUlBOztBQU1BOztBQUNBOztBQUNBOzs7Ozs7Ozs7O0FBSUEsTUFBTUEsUUFBUSxHQUFHLHNDQUFqQjtBQUNBLE1BQU1DLFFBQVEsR0FBRywyREFBakI7QUFDQSxNQUFNQyxXQUFXLEdBQUcs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MEIsS0FBSzBCLE9BQS9CLENBQXBDO0FBQ0Q7O0FBckRzQzs7ZUF3RDFCMEIsYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgYnVpbGRVcmwgZnJvbSAnYnVpbGQtdXJsJztcbmltcG9ydCBtb21lbnQsIHsgTW9tZW50IH0gZnJvbSAnbW9tZW50JztcblxuaW1wb3J0IHtcbiAgU2NyYXBlckVycm9yVHlwZXMsIEJhc2VTY3JhcGVyLFxuICBTY2FwZXJPcHRpb25zLCBTY2FwZXJQcm9ncmVzc1R5cGVzLCBTY3JhcGVyQ3JlZGVudGlhbHMsXG59IGZyb20gJy4vYmFzZS1zY3JhcGVyJztcbmltcG9ydCB7XG4gIFNIRUtFTF9DVVJSRU5DWV9TWU1CT0wsXG4gIFNIRUtFTF9DVVJSRU5DWSxcbiAgRE9MTEFSX0NVUlJFTkNZX1NZTUJPTCxcbiAgRE9MTEFSX0NVUlJFTkNZLFxufSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZmV0Y2hHZXQsIGZldGNoUG9zdCB9IGZyb20gJy4uL2hlbHBlcnMvZmV0Y2gnO1xuaW1wb3J0IHsgZml4SW5zdGFsbG1lbnRzLCBzb3J0VHJhbnNhY3Rpb25zQnlEYXRlLCBmaWx0ZXJPbGRUcmFuc2FjdGlvbnMgfSBmcm9tICcuLi9oZWxwZXJzL3RyYW5zYWN0aW9ucyc7XG5pbXBvcnQge1xuICBUcmFuc2FjdGlvbnNBY2NvdW50LCBUcmFuc2FjdGlvbiwgVHJhbnNhY3Rpb25TdGF0dXNlcywgVHJhbnNhY3Rpb25UeXBlcyxcbn0gZnJvbSAnLi4vdHJhbnNhY3Rpb25zJztcblxuY29uc3QgQkFTRV9VUkwgPSAnaHR0cHM6Ly9jYWw0dS5jYWwtb25saW5lLmNvLmlsL0NhbDRVJztcbmNvbnN0IEFVVEhfVVJMID0gJ2h0dHBzOi8vY29ubmVjdC5jYWwtb25saW5lLmNvLmlsL2FwaS9hdXRoZW50aWNhdGlvbi9sb2dpbic7XG5jb25zdCBEQVRFX0ZPUk1BVCA9ICdERC9NTS9ZWVlZJztcblxuY29uc3QgUEFTU1dPUkRfRVhQSVJFRF9NU0dTID0gWyfXqteV16fXoyDXlNeh15nXodee15Ag16TXkicsICfXkNeg15Ug157Xqteg16bXnNeZ150sINei16fXkSDXqten15zXlCDXnNeQINeg15nXqtefINec15HXpteiINeQ16og15TXpNei15XXnNeUINeb16LXqi5816DXmdeq158g15zXoNeh15XXqiDXqdeg15nXqiDXkdee15XXoteTINee15DXldeX16gg15nXldeq16gnXTtcbmNvbnN0IElOVkFMSURfQ1JFREVOVElBTFMgPSAn16nXnSDXlNee16nXqtee16kg15DXlSDXlNeh15nXodee15Qg16nXlNeV15bXoNeVINep15LXldeZ15nXnSc7XG5jb25zdCBOT19EQVRBX0ZPVU5EX01TRyA9ICfXnNeQINeg157XpteQ15Ug15fXmdeV15HXmdedINec15jXldeV15cg16rXkNeo15nXm9eZ150g15bXlCc7XG5jb25zdCBBQ0NPVU5UX0JMT0NLRURfTVNHID0gJ9eU15vXoNeZ16HXlCDXnNee16DXldeZINeg15fXodee15Qg16LXp9eRINeo15nXkdeV15kg16DXodeZ15XXoNeV16og15vXldep15zXmdedLiDXnNep15fXqNeV16gg15TXnteg15XXmSDXkdeQ16TXqdeo15XXqteaINec15fXk9epINeh15nXodee15Qg16LXnCDXmdeT15kg15HXl9eZ16jXqiDXqdeb15fXqteZINep150g157Xqdeq157XqSDXodeZ16HXnteUJztcblxuY29uc3QgTk9STUFMX1RZUEVfQ09ERSA9ICc1JztcbmNvbnN0IFJFRlVORF9UWVBFX0NPREUgPSAnNic7XG5jb25zdCBXSVRIRFJBV0FMX1RZUEVfQ09ERSA9ICc3JztcbmNvbnN0IElOU1RBTExNRU5UU19UWVBFX0NPREUgPSAnOCc7XG5jb25zdCBDQU5DRUxfVFlQRV9DT0RFID0gJzI1JztcbmNvbnN0IFdJVEhEUkFXQUxfVFlQRV9DT0RFXzIgPSAnMjcnO1xuY29uc3QgREVCSVRfVFlQRV9DT0RFID0gJzQxJztcbmNvbnN0IERFQklUX1JFRlVORF9UWVBFX0NPREUgPSAnNDInO1xuY29uc3QgQ1JFRElUX1BBWU1FTlRTX0NPREUgPSAnNTknO1xuY29uc3QgTUVNQkVSU0hJUF9GRUVfVFlQRV9DT0RFID0gJzY3JztcbmNvbnN0IFNFUlZJQ0VTX1JFRlVORF9UWVBFX0NPREUgPSAnNzEnO1xuY29uc3QgU0VSVklDRVNfVFlQRV9DT0RFID0gJzcyJztcbmNvbnN0IFJFRlVORF9UWVBFX0NPREVfMiA9ICc3Nic7XG5jb25zdCBDQU5DRUxfUEFZTUVOVF9DT0RFID0gJzg2JztcblxuY29uc3QgSEVBREVSX1NJVEUgPSB7ICdYLVNpdGUtSWQnOiAnOEQzN0RGMTYtNTgxMi00QUNELUJBRTctQ0QxQTVCRkEyMjA2JyB9O1xuXG5cbmludGVyZmFjZSBCYW5rRGViaXRzUmVzcG9uc2Uge1xuICBSZXNwb25zZToge1xuICAgIFN0YXR1czoge1xuICAgICAgU3VjY2VlZGVkOiBib29sZWFuO1xuICAgICAgRGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgIE1lc3NhZ2U6IHN0cmluZztcbiAgICB9O1xuICB9O1xuICBEZWJpdHM6IHtcbiAgICBDYXJkSWQ6IHN0cmluZztcbiAgICBEYXRlOiBzdHJpbmc7XG4gIH1bXTtcbn1cblxuaW50ZXJmYWNlIEJhbmtBY2NvdW50Q2FyZCB7XG4gIElkOiBzdHJpbmc7XG4gIElzRWZmZWN0aXZlSW5kOiBib29sZWFuO1xuICBMYXN0Rm91ckRpZ2l0czogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgQ2FyZEJ5QWNjb3VudFJlc3BvbnNlIHtcbiAgUmVzcG9uc2U6IHtcbiAgICBTdGF0dXM6IHtcbiAgICAgIFN1Y2NlZWRlZDogYm9vbGVhbjtcbiAgICB9O1xuICB9O1xuICBCYW5rQWNjb3VudHM6IHtcbiAgICBBY2NvdW50SUQ6IHN0cmluZztcbiAgICBDYXJkczogQmFua0FjY291bnRDYXJkW107XG4gIH1bXTtcbn1cblxuaW50ZXJmYWNlIFNjcmFwZWRUcmFuc2FjdGlvbiB7XG4gIElkOiBzdHJpbmc7XG4gIFRyYW5zVHlwZTogc3RyaW5nO1xuICBEYXRlOiBzdHJpbmc7XG4gIERlYml0RGF0ZTogc3RyaW5nO1xuICBBbW91bnQ6IHtcbiAgICBWYWx1ZTogbnVtYmVyO1xuICAgIFN5bWJvbDogc3RyaW5nO1xuICB9O1xuICBEZWJpdEFtb3VudDoge1xuICAgIFZhbHVlOiBudW1iZXI7XG4gIH07XG4gIE1lcmNoYW50RGV0YWlsczoge1xuICAgIE5hbWU6IHN0cmluZztcbiAgfTtcbiAgVHJhbnNUeXBlRGVzYzogc3RyaW5nO1xuICBUb3RhbFBheW1lbnRzPzogc3RyaW5nO1xuICBDdXJyZW50UGF5bWVudD86IHN0cmluZztcbn1cblxuZnVuY3Rpb24gZ2V0QmFua0RlYml0c1VybChhY2NvdW50SWQ6IHN0cmluZykge1xuICBjb25zdCB0b0RhdGUgPSBtb21lbnQoKS5hZGQoMiwgJ21vbnRocycpO1xuICBjb25zdCBmcm9tRGF0ZSA9IG1vbWVudCgpLnN1YnRyYWN0KDYsICdtb250aHMnKTtcblxuICByZXR1cm4gYnVpbGRVcmwoQkFTRV9VUkwsIHtcbiAgICBwYXRoOiBgQ2FsQmFua0RlYml0cy8ke2FjY291bnRJZH1gLFxuICAgIHF1ZXJ5UGFyYW1zOiB7XG4gICAgICBEZWJpdExldmVsOiAnQScsXG4gICAgICBEZWJpdFR5cGU6ICcyJyxcbiAgICAgIEZyb21Nb250aDogKGZyb21EYXRlLm1vbnRoKCkgKyAxKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyksXG4gICAgICBGcm9tWWVhcjogZnJvbURhdGUueWVhcigpLnRvU3RyaW5nKCksXG4gICAgICBUb01vbnRoOiAodG9EYXRlLm1vbnRoKCkgKyAxKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyksXG4gICAgICBUb1llYXI6IHRvRGF0ZS55ZWFyKCkudG9TdHJpbmcoKSxcbiAgICB9LFxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25zVXJsKGNhcmRJZDogc3RyaW5nLCBkZWJpdERhdGU6IHN0cmluZykge1xuICByZXR1cm4gYnVpbGRVcmwoQkFTRV9VUkwsIHtcbiAgICBwYXRoOiBgQ2FsVHJhbnNhY3Rpb25zLyR7Y2FyZElkfWAsXG4gICAgcXVlcnlQYXJhbXM6IHtcbiAgICAgIFRvRGF0ZTogZGViaXREYXRlLFxuICAgICAgRnJvbURhdGU6IGRlYml0RGF0ZSxcbiAgICB9LFxuICB9KTtcbn1cblxuZnVuY3Rpb24gY29udmVydFRyYW5zYWN0aW9uVHlwZSh0eG5UeXBlOiBzdHJpbmcpIHtcbiAgc3dpdGNoICh0eG5UeXBlKSB7XG4gICAgY2FzZSBOT1JNQUxfVFlQRV9DT0RFOlxuICAgIGNhc2UgUkVGVU5EX1RZUEVfQ09ERTpcbiAgICBjYXNlIENBTkNFTF9UWVBFX0NPREU6XG4gICAgY2FzZSBXSVRIRFJBV0FMX1RZUEVfQ09ERTpcbiAgICBjYXNlIFdJVEhEUkFXQUxfVFlQRV9DT0RFXzI6XG4gICAgY2FzZSBSRUZVTkRfVFlQRV9DT0RFXzI6XG4gICAgY2FzZSBDQU5DRUxfUEFZTUVOVF9DT0RFOlxuICAgIGNhc2UgU0VSVklDRVNfUkVGVU5EX1RZUEVfQ09ERTpcbiAgICBjYXNlIE1FTUJFUlNISVBfRkVFX1RZUEVfQ09ERTpcbiAgICBjYXNlIFNFUlZJQ0VTX1RZUEVfQ09ERTpcbiAgICBjYXNlIERFQklUX1RZUEVfQ09ERTpcbiAgICBjYXNlIERFQklUX1JFRlVORF9UWVBFX0NPREU6XG4gICAgICByZXR1cm4gVHJhbnNhY3Rpb25UeXBlcy5Ob3JtYWw7XG4gICAgY2FzZSBJTlNUQUxMTUVOVFNfVFlQRV9DT0RFOlxuICAgIGNhc2UgQ1JFRElUX1BBWU1FTlRTX0NPREU6XG4gICAgICByZXR1cm4gVHJhbnNhY3Rpb25UeXBlcy5JbnN0YWxsbWVudHM7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5rbm93biB0cmFuc2FjdGlvbiB0eXBlICR7dHhuVHlwZX1gKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb252ZXJ0Q3VycmVuY3koY3VycmVuY3k6IHN0cmluZykge1xuICBzd2l0Y2ggKGN1cnJlbmN5KSB7XG4gICAgY2FzZSBTSEVLRUxfQ1VSUkVOQ1lfU1lNQk9MOlxuICAgICAgcmV0dXJuIFNIRUtFTF9DVVJSRU5DWTtcbiAgICBjYXNlIERPTExBUl9DVVJSRU5DWV9TWU1CT0w6XG4gICAgICByZXR1cm4gRE9MTEFSX0NVUlJFTkNZO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gY3VycmVuY3k7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SW5zdGFsbG1lbnRzSW5mbyh0eG46IFNjcmFwZWRUcmFuc2FjdGlvbikge1xuICBpZiAoIXR4bi5DdXJyZW50UGF5bWVudCB8fCB0eG4uQ3VycmVudFBheW1lbnQgPT09ICcwJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBudW1iZXI6IHBhcnNlSW50KHR4bi5DdXJyZW50UGF5bWVudCwgMTApLFxuICAgIHRvdGFsOiB0eG4uVG90YWxQYXltZW50cyA/IHBhcnNlSW50KHR4bi5Ub3RhbFBheW1lbnRzLCAxMCkgOiBOdW1iZXIuTmFOLFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2FjdGlvbk1lbW8odHhuOiBTY3JhcGVkVHJhbnNhY3Rpb24pIHtcbiAgY29uc3QgeyBUcmFuc1R5cGU6IHR4blR5cGUsIFRyYW5zVHlwZURlc2M6IHR4blR5cGVEZXNjcmlwdGlvbiB9ID0gdHhuO1xuICBzd2l0Y2ggKHR4blR5cGUpIHtcbiAgICBjYXNlIE5PUk1BTF9UWVBFX0NPREU6XG4gICAgICByZXR1cm4gdHhuVHlwZURlc2NyaXB0aW9uID09PSAn16jXm9eZ16nXlCDXqNeS15nXnNeUJyA/ICcnIDogdHhuVHlwZURlc2NyaXB0aW9uO1xuICAgIGNhc2UgSU5TVEFMTE1FTlRTX1RZUEVfQ09ERTpcbiAgICAgIHJldHVybiBg16rXqdec15XXnSAke3R4bi5DdXJyZW50UGF5bWVudH0g157XqteV15ogJHt0eG4uVG90YWxQYXltZW50c31gO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdHhuLlRyYW5zVHlwZURlc2M7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29udmVydFRyYW5zYWN0aW9ucyh0eG5zOiBTY3JhcGVkVHJhbnNhY3Rpb25bXSk6IFRyYW5zYWN0aW9uW10ge1xuICByZXR1cm4gdHhucy5tYXAoKHR4bikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBjb252ZXJ0VHJhbnNhY3Rpb25UeXBlKHR4bi5UcmFuc1R5cGUpLFxuICAgICAgaWRlbnRpZmllcjogcGFyc2VJbnQodHhuLklkLCAxMCksXG4gICAgICBkYXRlOiBtb21lbnQodHhuLkRhdGUsIERBVEVfRk9STUFUKS50b0lTT1N0cmluZygpLFxuICAgICAgcHJvY2Vzc2VkRGF0ZTogbW9tZW50KHR4bi5EZWJpdERhdGUsIERBVEVfRk9STUFUKS50b0lTT1N0cmluZygpLFxuICAgICAgb3JpZ2luYWxBbW91bnQ6IC10eG4uQW1vdW50LlZhbHVlLFxuICAgICAgb3JpZ2luYWxDdXJyZW5jeTogY29udmVydEN1cnJlbmN5KHR4bi5BbW91bnQuU3ltYm9sKSxcbiAgICAgIGNoYXJnZWRBbW91bnQ6IC10eG4uRGViaXRBbW91bnQuVmFsdWUsXG4gICAgICBkZXNjcmlwdGlvbjogdHhuLk1lcmNoYW50RGV0YWlscy5OYW1lLFxuICAgICAgbWVtbzogZ2V0VHJhbnNhY3Rpb25NZW1vKHR4biksXG4gICAgICBpbnN0YWxsbWVudHM6IGdldEluc3RhbGxtZW50c0luZm8odHhuKSB8fCB1bmRlZmluZWQsXG4gICAgICBzdGF0dXM6IFRyYW5zYWN0aW9uU3RhdHVzZXMuQ29tcGxldGVkLFxuICAgIH07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwcmVwYXJlVHJhbnNhY3Rpb25zKHR4bnM6IFRyYW5zYWN0aW9uW10sIHN0YXJ0TW9tZW50OiBNb21lbnQsIGNvbWJpbmVJbnN0YWxsbWVudHM6IGJvb2xlYW4pOiBUcmFuc2FjdGlvbltdIHtcbiAgbGV0IGNsb25lZFR4bnM6IFRyYW5zYWN0aW9uW10gPSBBcnJheS5mcm9tKHR4bnMpO1xuICBpZiAoIWNvbWJpbmVJbnN0YWxsbWVudHMpIHtcbiAgICBjbG9uZWRUeG5zID0gZml4SW5zdGFsbG1lbnRzKGNsb25lZFR4bnMpO1xuICB9XG4gIGNsb25lZFR4bnMgPSBzb3J0VHJhbnNhY3Rpb25zQnlEYXRlKGNsb25lZFR4bnMpO1xuICBjbG9uZWRUeG5zID0gZmlsdGVyT2xkVHJhbnNhY3Rpb25zKGNsb25lZFR4bnMsIHN0YXJ0TW9tZW50LCBjb21iaW5lSW5zdGFsbG1lbnRzKTtcbiAgcmV0dXJuIGNsb25lZFR4bnM7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEJhbmtEZWJpdHMoYXV0aEhlYWRlcjogUmVjb3JkPHN0cmluZywgYW55PiwgYWNjb3VudElkOiBzdHJpbmcpOiBQcm9taXNlPEJhbmtEZWJpdHNSZXNwb25zZT4ge1xuICBjb25zdCBiYW5rRGViaXRzVXJsID0gZ2V0QmFua0RlYml0c1VybChhY2NvdW50SWQpO1xuICByZXR1cm4gZmV0Y2hHZXQoYmFua0RlYml0c1VybCwgYXV0aEhlYWRlcik7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uc05leHRQYWdlKGF1dGhIZWFkZXI6IFJlY29yZDxzdHJpbmcsIGFueT4pIHtcbiAgY29uc3QgaGFzTmV4dFBhZ2VVcmwgPSBgJHtCQVNFX1VSTH0vQ2FsVHJhbnNOZXh0UGFnZWA7XG4gIHJldHVybiBmZXRjaEdldDx7IEhhc05leHRQYWdlOiBib29sZWFuO1xuICAgIFRyYW5zYWN0aW9ucz86IFNjcmFwZWRUcmFuc2FjdGlvbltdO30+KGhhc05leHRQYWdlVXJsLCBhdXRoSGVhZGVyKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hUeG5zKGF1dGhIZWFkZXI6IFJlY29yZDxzdHJpbmcsIGFueT4sIGNhcmRJZDogc3RyaW5nLCBkZWJpdERhdGVzOiBzdHJpbmdbXSk6IFByb21pc2U8U2NyYXBlZFRyYW5zYWN0aW9uW10+IHtcbiAgY29uc3QgdHhuczogU2NyYXBlZFRyYW5zYWN0aW9uW10gPSBbXTtcbiAgZm9yIChjb25zdCBkYXRlIG9mIGRlYml0RGF0ZXMpIHtcbiAgICBjb25zdCBmZXRjaFR4blVybCA9IGdldFRyYW5zYWN0aW9uc1VybChjYXJkSWQsIGRhdGUpO1xuICAgIGxldCB0eG5SZXNwb25zZSA9IGF3YWl0IGZldGNoR2V0PHsgSGFzTmV4dFBhZ2U6IGJvb2xlYW47XG4gICAgICBUcmFuc2FjdGlvbnM/OiBTY3JhcGVkVHJhbnNhY3Rpb25bXTt9PihmZXRjaFR4blVybCwgYXV0aEhlYWRlcik7XG4gICAgaWYgKHR4blJlc3BvbnNlLlRyYW5zYWN0aW9ucykge1xuICAgICAgdHhucy5wdXNoKC4uLnR4blJlc3BvbnNlLlRyYW5zYWN0aW9ucyk7XG4gICAgfVxuICAgIHdoaWxlICh0eG5SZXNwb25zZS5IYXNOZXh0UGFnZSkge1xuICAgICAgdHhuUmVzcG9uc2UgPSBhd2FpdCBnZXRUcmFuc2FjdGlvbnNOZXh0UGFnZShhdXRoSGVhZGVyKTtcbiAgICAgIGlmICh0eG5SZXNwb25zZS5UcmFuc2FjdGlvbnMgIT0gbnVsbCkge1xuICAgICAgICB0eG5zLnB1c2goLi4udHhuUmVzcG9uc2UuVHJhbnNhY3Rpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHR4bnM7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFR4bnNPZkNhcmQoYXV0aEhlYWRlcjogUmVjb3JkPHN0cmluZywgYW55PiwgY2FyZDogQmFua0FjY291bnRDYXJkLCBiYW5rRGViaXRzOiBCYW5rRGViaXRzUmVzcG9uc2VbJ0RlYml0cyddKTogUHJvbWlzZTxTY3JhcGVkVHJhbnNhY3Rpb25bXT4ge1xuICBjb25zdCBjYXJkSWQgPSBjYXJkLklkO1xuICBjb25zdCBjYXJkRGViaXREYXRlcyA9IGJhbmtEZWJpdHMuZmlsdGVyKChiYW5rRGViaXQpID0+IHtcbiAgICByZXR1cm4gYmFua0RlYml0LkNhcmRJZCA9PT0gY2FyZElkO1xuICB9KS5tYXAoKGNhcmREZWJpdCkgPT4ge1xuICAgIHJldHVybiBjYXJkRGViaXQuRGF0ZTtcbiAgfSk7XG4gIHJldHVybiBmZXRjaFR4bnMoYXV0aEhlYWRlciwgY2FyZElkLCBjYXJkRGViaXREYXRlcyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uc0ZvckFsbEFjY291bnRzKGF1dGhIZWFkZXI6IFJlY29yZDxzdHJpbmcsIGFueT4sIHN0YXJ0TW9tZW50OiBNb21lbnQsIG9wdGlvbnM6IFNjYXBlck9wdGlvbnMpIHtcbiAgY29uc3QgY2FyZHNCeUFjY291bnRVcmwgPSBgJHtCQVNFX1VSTH0vQ2FyZHNCeUFjY291bnRzYDtcbiAgY29uc3QgYmFua3NSZXNwb25zZSA9IGF3YWl0IGZldGNoR2V0PENhcmRCeUFjY291bnRSZXNwb25zZT4oY2FyZHNCeUFjY291bnRVcmwsIGF1dGhIZWFkZXIpO1xuXG4gIGlmIChfLmdldChiYW5rc1Jlc3BvbnNlLCAnUmVzcG9uc2UuU3RhdHVzLlN1Y2NlZWRlZCcpKSB7XG4gICAgY29uc3QgYWNjb3VudHM6IFRyYW5zYWN0aW9uc0FjY291bnRbXSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmFua3NSZXNwb25zZS5CYW5rQWNjb3VudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGJhbmsgPSBiYW5rc1Jlc3BvbnNlLkJhbmtBY2NvdW50c1tpXTtcbiAgICAgIGNvbnN0IGJhbmtEZWJpdHMgPSBhd2FpdCBnZXRCYW5rRGViaXRzKGF1dGhIZWFkZXIsIGJhbmsuQWNjb3VudElEKTtcbiAgICAgIC8vIENoZWNrIHRoYXQgdGhlIGJhbmsgaGFzIGFuIGFjdGl2ZSBjYXJkIHRvIHNjcmFwZVxuICAgICAgaWYgKGJhbmsuQ2FyZHMuc29tZSgoY2FyZCkgPT4gY2FyZC5Jc0VmZmVjdGl2ZUluZCkpIHtcbiAgICAgICAgaWYgKF8uZ2V0KGJhbmtEZWJpdHMsICdSZXNwb25zZS5TdGF0dXMuU3VjY2VlZGVkJykpIHtcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJhbmsuQ2FyZHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHJhd1R4bnMgPSBhd2FpdCBnZXRUeG5zT2ZDYXJkKGF1dGhIZWFkZXIsIGJhbmsuQ2FyZHNbal0sIGJhbmtEZWJpdHMuRGViaXRzKTtcbiAgICAgICAgICAgIGlmIChyYXdUeG5zKSB7XG4gICAgICAgICAgICAgIGxldCB0eG5zID0gY29udmVydFRyYW5zYWN0aW9ucyhyYXdUeG5zKTtcbiAgICAgICAgICAgICAgdHhucyA9IHByZXBhcmVUcmFuc2FjdGlvbnModHhucywgc3RhcnRNb21lbnQsIG9wdGlvbnMuY29tYmluZUluc3RhbGxtZW50cyB8fCBmYWxzZSk7XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogVHJhbnNhY3Rpb25zQWNjb3VudCA9IHtcbiAgICAgICAgICAgICAgICBhY2NvdW50TnVtYmVyOiBiYW5rLkNhcmRzW2pdLkxhc3RGb3VyRGlnaXRzLFxuICAgICAgICAgICAgICAgIHR4bnMsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGFjY291bnRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgeyBEZXNjcmlwdGlvbiwgTWVzc2FnZSB9ID0gYmFua0RlYml0cy5SZXNwb25zZS5TdGF0dXM7XG5cbiAgICAgICAgICBpZiAoTWVzc2FnZSAhPT0gTk9fREFUQV9GT1VORF9NU0cpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtEZXNjcmlwdGlvbn0uICR7TWVzc2FnZX1gO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGFjY291bnRzLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xufVxuXG5jbGFzcyBWaXNhQ2FsU2NyYXBlciBleHRlbmRzIEJhc2VTY3JhcGVyIHtcbiAgcHJpdmF0ZSBhdXRoSGVhZGVyID0gJyc7XG5cbiAgYXN5bmMgbG9naW4oY3JlZGVudGlhbHM6IFNjcmFwZXJDcmVkZW50aWFscykge1xuICAgIGNvbnN0IGF1dGhSZXF1ZXN0ID0ge1xuICAgICAgdXNlcm5hbWU6IGNyZWRlbnRpYWxzLnVzZXJuYW1lLFxuICAgICAgcGFzc3dvcmQ6IGNyZWRlbnRpYWxzLnBhc3N3b3JkLFxuICAgICAgcmVtZW1iZXJNZTogbnVsbCxcbiAgICB9O1xuXG4gICAgdGhpcy5lbWl0UHJvZ3Jlc3MoU2NhcGVyUHJvZ3Jlc3NUeXBlcy5Mb2dnaW5nSW4pO1xuXG4gICAgY29uc3QgYXV0aFJlc3BvbnNlID0gYXdhaXQgZmV0Y2hQb3N0KEFVVEhfVVJMLCBhdXRoUmVxdWVzdCwgSEVBREVSX1NJVEUpO1xuICAgIGlmIChQQVNTV09SRF9FWFBJUkVEX01TR1MuaW5jbHVkZXMoYXV0aFJlc3BvbnNlKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yVHlwZTogU2NyYXBlckVycm9yVHlwZXMuQ2hhbmdlUGFzc3dvcmQsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChhdXRoUmVzcG9uc2UgPT09IElOVkFMSURfQ1JFREVOVElBTFMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvclR5cGU6IFNjcmFwZXJFcnJvclR5cGVzLkludmFsaWRQYXNzd29yZCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGF1dGhSZXNwb25zZSA9PT0gQUNDT1VOVF9CTE9DS0VEX01TRykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yVHlwZTogU2NyYXBlckVycm9yVHlwZXMuQWNjb3VudEJsb2NrZWQsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICghYXV0aFJlc3BvbnNlIHx8ICFhdXRoUmVzcG9uc2UudG9rZW4pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvclR5cGU6IFNjcmFwZXJFcnJvclR5cGVzLkdlbmVyYWwsXG4gICAgICAgIGVycm9yTWVzc2FnZTogYE5vIHRva2VuIGZvdW5kIGluIGF1dGhSZXNwb25zZTogJHtKU09OLnN0cmluZ2lmeShhdXRoUmVzcG9uc2UpfWAsXG4gICAgICB9O1xuICAgIH1cbiAgICB0aGlzLmF1dGhIZWFkZXIgPSBgQ0FMQXV0aFNjaGVtZSAke2F1dGhSZXNwb25zZS50b2tlbn1gO1xuICAgIHRoaXMuZW1pdFByb2dyZXNzKFNjYXBlclByb2dyZXNzVHlwZXMuTG9naW5TdWNjZXNzKTtcbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gIH1cblxuICBhc3luYyBmZXRjaERhdGEoKSB7XG4gICAgY29uc3QgZGVmYXVsdFN0YXJ0TW9tZW50ID0gbW9tZW50KCkuc3VidHJhY3QoMSwgJ3llYXJzJyk7XG4gICAgY29uc3Qgc3RhcnREYXRlID0gdGhpcy5vcHRpb25zLnN0YXJ0RGF0ZSB8fCBkZWZhdWx0U3RhcnRNb21lbnQudG9EYXRlKCk7XG4gICAgY29uc3Qgc3RhcnRNb21lbnQgPSBtb21lbnQubWF4KGRlZmF1bHRTdGFydE1vbWVudCwgbW9tZW50KHN0YXJ0RGF0ZSkpO1xuXG4gICAgY29uc3QgYXV0aEhlYWRlciA9IHsgQXV0aG9yaXphdGlvbjogdGhpcy5hdXRoSGVhZGVyLCAuLi5IRUFERVJfU0lURSB9O1xuICAgIHJldHVybiBnZXRUcmFuc2FjdGlvbnNGb3JBbGxBY2NvdW50cyhhdXRoSGVhZGVyLCBzdGFydE1vbWVudCwgdGhpcy5vcHRpb25zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBWaXNhQ2FsU2NyYXBlcjtcbiJdfQ==