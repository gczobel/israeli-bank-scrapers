"use strict";

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.waitForNavigation = waitForNavigation;
exports.waitForNavigationAndDomLoad = waitForNavigationAndDomLoad;
exports.getCurrentUrl = getCurrentUrl;
exports.waitForRedirect = waitForRedirect;
exports.waitForUrl = waitForUrl;

var _waiting = require("./waiting");

async function waitForNavigation(pageOrFrame, options) {
  await pageOrFrame.waitForNavigation(options);
}

async function waitForNavigationAndDomLoad(page) {
  await waitForNavigation(page, {
    waitUntil: 'domcontentloaded'
  });
}

async function getCurrentUrl(pageOrFrame, clientSide = false) {
  if (clientSide) {
    return pageOrFrame.evaluate(() => window.location.href);
  }

  return pageOrFrame.url();
}

async function waitForRedirect(pageOrFrame, timeout = 20000, clientSide = false, ignoreList = []) {
  const initial = await getCurrentUrl(pageOrFrame, clientSide);
  await (0, _waiting.waitUntil)(async () => {
    const current = await getCurrentUrl(pageOrFrame, clientSide);
    return current !== initial && !ignoreList.includes(current);
  }, `waiting for redirect from ${initial}`, timeout, 1000);
}

async function waitForUrl(pageOrFrame, url, timeout = 20000, clientSide = false) {
  await (0, _waiting.waitUntil)(async () => {
    const current = await getCurrentUrl(pageOrFrame, clientSide);
    return url instanceof RegExp ? url.test(current) : url === current;
  }, `waiting for url to be ${url}`, timeout, 1000);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL25hdmlnYXRpb24udHMiXSwibmFtZXMiOlsid2FpdEZvck5hdmlnYXRpb24iLCJwYWdlT3JGcmFtZSIsIm9wdGlvbnMiLCJ3YWl0Rm9yTmF2aWdhdGlvbkFuZERvbUxvYWQiLCJwYWdlIiwid2FpdFVudGlsIiwiZ2V0Q3VycmVudFVybCIsImNsaWVudFNpZGUiLCJldmFsdWF0ZSIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsInVybCIsIndhaXRGb3JSZWRpcmVjdCIsInRpbWVvdXQiLCJpZ25vcmVMaXN0IiwiaW5pdGlhbCIsImN1cnJlbnQiLCJpbmNsdWRlcyIsIndhaXRGb3JVcmwiLCJSZWdFeHAiLCJ0ZXN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0E7O0FBRU8sZUFBZUEsaUJBQWYsQ0FBaUNDLFdBQWpDLEVBQTREQyxPQUE1RCxFQUF5RjtBQUM5RixRQUFNRCxXQUFXLENBQUNELGlCQUFaLENBQThCRSxPQUE5QixDQUFOO0FBQ0Q7O0FBRU0sZUFBZUMsMkJBQWYsQ0FBMkNDLElBQTNDLEVBQXVEO0FBQzVELFFBQU1KLGlCQUFpQixDQUFDSSxJQUFELEVBQU87QUFBRUMsSUFBQUEsU0FBUyxFQUFFO0FBQWIsR0FBUCxDQUF2QjtBQUNEOztBQUVNLGVBQWVDLGFBQWYsQ0FBNkJMLFdBQTdCLEVBQXdETSxVQUFVLEdBQUcsS0FBckUsRUFBNEU7QUFDakYsTUFBSUEsVUFBSixFQUFnQjtBQUNkLFdBQU9OLFdBQVcsQ0FBQ08sUUFBWixDQUFxQixNQUFNQyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JDLElBQTNDLENBQVA7QUFDRDs7QUFFRCxTQUFPVixXQUFXLENBQUNXLEdBQVosRUFBUDtBQUNEOztBQUVNLGVBQWVDLGVBQWYsQ0FBK0JaLFdBQS9CLEVBQTBEYSxPQUFPLEdBQUcsS0FBcEUsRUFDTFAsVUFBVSxHQUFHLEtBRFIsRUFDZVEsVUFBb0IsR0FBRyxFQUR0QyxFQUMwQztBQUMvQyxRQUFNQyxPQUFPLEdBQUcsTUFBTVYsYUFBYSxDQUFDTCxXQUFELEVBQWNNLFVBQWQsQ0FBbkM7QUFFQSxRQUFNLHdCQUFVLFlBQVk7QUFDMUIsVUFBTVUsT0FBTyxHQUFHLE1BQU1YLGFBQWEsQ0FBQ0wsV0FBRCxFQUFjTSxVQUFkLENBQW5DO0FBQ0EsV0FBT1UsT0FBTyxLQUFLRCxPQUFaLElBQXVCLENBQUNELFVBQVUsQ0FBQ0csUUFBWCxDQUFvQkQsT0FBcEIsQ0FBL0I7QUFDRCxHQUhLLEVBR0YsNkJBQTRCRCxPQUFRLEVBSGxDLEVBR3FDRixPQUhyQyxFQUc4QyxJQUg5QyxDQUFOO0FBSUQ7O0FBRU0sZUFBZUssVUFBZixDQUEwQmxCLFdBQTFCLEVBQXFEVyxHQUFyRCxFQUEyRUUsT0FBTyxHQUFHLEtBQXJGLEVBQTRGUCxVQUFVLEdBQUcsS0FBekcsRUFBZ0g7QUFDckgsUUFBTSx3QkFBVSxZQUFZO0FBQzFCLFVBQU1VLE9BQU8sR0FBRyxNQUFNWCxhQUFhLENBQUNMLFdBQUQsRUFBY00sVUFBZCxDQUFuQztBQUNBLFdBQU9LLEdBQUcsWUFBWVEsTUFBZixHQUF3QlIsR0FBRyxDQUFDUyxJQUFKLENBQVNKLE9BQVQsQ0FBeEIsR0FBNENMLEdBQUcsS0FBS0ssT0FBM0Q7QUFDRCxHQUhLLEVBR0YseUJBQXdCTCxHQUFJLEVBSDFCLEVBRzZCRSxPQUg3QixFQUdzQyxJQUh0QyxDQUFOO0FBSUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGcmFtZSwgTmF2aWdhdGlvbk9wdGlvbnMsIFBhZ2UgfSBmcm9tICdwdXBwZXRlZXInO1xuaW1wb3J0IHsgd2FpdFVudGlsIH0gZnJvbSAnLi93YWl0aW5nJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JOYXZpZ2F0aW9uKHBhZ2VPckZyYW1lOiBQYWdlIHwgRnJhbWUsIG9wdGlvbnM/OiBOYXZpZ2F0aW9uT3B0aW9ucykge1xuICBhd2FpdCBwYWdlT3JGcmFtZS53YWl0Rm9yTmF2aWdhdGlvbihvcHRpb25zKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JOYXZpZ2F0aW9uQW5kRG9tTG9hZChwYWdlOiBQYWdlKSB7XG4gIGF3YWl0IHdhaXRGb3JOYXZpZ2F0aW9uKHBhZ2UsIHsgd2FpdFVudGlsOiAnZG9tY29udGVudGxvYWRlZCcgfSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDdXJyZW50VXJsKHBhZ2VPckZyYW1lOiBQYWdlIHwgRnJhbWUsIGNsaWVudFNpZGUgPSBmYWxzZSkge1xuICBpZiAoY2xpZW50U2lkZSkge1xuICAgIHJldHVybiBwYWdlT3JGcmFtZS5ldmFsdWF0ZSgoKSA9PiB3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gIH1cblxuICByZXR1cm4gcGFnZU9yRnJhbWUudXJsKCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yUmVkaXJlY3QocGFnZU9yRnJhbWU6IFBhZ2UgfCBGcmFtZSwgdGltZW91dCA9IDIwMDAwLFxuICBjbGllbnRTaWRlID0gZmFsc2UsIGlnbm9yZUxpc3Q6IHN0cmluZ1tdID0gW10pIHtcbiAgY29uc3QgaW5pdGlhbCA9IGF3YWl0IGdldEN1cnJlbnRVcmwocGFnZU9yRnJhbWUsIGNsaWVudFNpZGUpO1xuXG4gIGF3YWl0IHdhaXRVbnRpbChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudCA9IGF3YWl0IGdldEN1cnJlbnRVcmwocGFnZU9yRnJhbWUsIGNsaWVudFNpZGUpO1xuICAgIHJldHVybiBjdXJyZW50ICE9PSBpbml0aWFsICYmICFpZ25vcmVMaXN0LmluY2x1ZGVzKGN1cnJlbnQpO1xuICB9LCBgd2FpdGluZyBmb3IgcmVkaXJlY3QgZnJvbSAke2luaXRpYWx9YCwgdGltZW91dCwgMTAwMCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yVXJsKHBhZ2VPckZyYW1lOiBQYWdlIHwgRnJhbWUsIHVybDogc3RyaW5nIHwgUmVnRXhwLCB0aW1lb3V0ID0gMjAwMDAsIGNsaWVudFNpZGUgPSBmYWxzZSkge1xuICBhd2FpdCB3YWl0VW50aWwoYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnQgPSBhd2FpdCBnZXRDdXJyZW50VXJsKHBhZ2VPckZyYW1lLCBjbGllbnRTaWRlKTtcbiAgICByZXR1cm4gdXJsIGluc3RhbmNlb2YgUmVnRXhwID8gdXJsLnRlc3QoY3VycmVudCkgOiB1cmwgPT09IGN1cnJlbnQ7XG4gIH0sIGB3YWl0aW5nIGZvciB1cmwgdG8gYmUgJHt1cmx9YCwgdGltZW91dCwgMTAwMCk7XG59XG4iXX0=