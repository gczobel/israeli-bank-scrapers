"use strict";

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchGet = fetchGet;
exports.fetchPost = fetchPost;
exports.fetchGetWithinPage = fetchGetWithinPage;
exports.fetchPostWithinPage = fetchPostWithinPage;

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const JSON_CONTENT_TYPE = 'application/json';

function getJsonHeaders() {
  return {
    Accept: JSON_CONTENT_TYPE,
    'Content-Type': JSON_CONTENT_TYPE
  };
}

async function fetchGet(url, extraHeaders) {
  let headers = getJsonHeaders();

  if (extraHeaders) {
    headers = Object.assign(headers, extraHeaders);
  }

  const request = {
    method: 'GET',
    headers
  };
  const fetchResult = await (0, _nodeFetch.default)(url, request);

  if (fetchResult.status !== 200) {
    throw new Error(`sending a request to the institute server returned with status code ${fetchResult.status}`);
  }

  return fetchResult.json();
}

async function fetchPost(url, data, extraHeaders) {
  let headers = getJsonHeaders();

  if (extraHeaders) {
    headers = Object.assign(headers, extraHeaders);
  }

  const request = {
    method: 'POST',
    headers,
    body: JSON.stringify(data)
  };
  const result = await (0, _nodeFetch.default)(url, request);
  return result.json();
}

async function fetchGetWithinPage(page, url) {
  return page.evaluate(url => {
    return new Promise((resolve, reject) => {
      fetch(url, {
        credentials: 'include'
      }).then(result => {
        if (result.status === 204) {
          resolve(null);
        } else {
          resolve(result.json());
        }
      }).catch(e => {
        reject(e);
      });
    });
  }, url);
}

async function fetchPostWithinPage(page, url, data, extraHeaders = {}) {
  return page.evaluate((url, data, extraHeaders) => {
    return new Promise((resolve, reject) => {
      fetch(url, {
        method: 'POST',
        body: JSON.stringify(data),
        credentials: 'include',
        // eslint-disable-next-line prefer-object-spread
        headers: Object.assign({
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
        }, extraHeaders)
      }).then(result => {
        if (result.status === 204) {
          // No content response
          resolve(null);
        } else {
          resolve(result.json());
        }
      }).catch(e => {
        reject(e);
      });
    });
  }, url, data, extraHeaders);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2ZldGNoLnRzIl0sIm5hbWVzIjpbIkpTT05fQ09OVEVOVF9UWVBFIiwiZ2V0SnNvbkhlYWRlcnMiLCJBY2NlcHQiLCJmZXRjaEdldCIsInVybCIsImV4dHJhSGVhZGVycyIsImhlYWRlcnMiLCJPYmplY3QiLCJhc3NpZ24iLCJyZXF1ZXN0IiwibWV0aG9kIiwiZmV0Y2hSZXN1bHQiLCJzdGF0dXMiLCJFcnJvciIsImpzb24iLCJmZXRjaFBvc3QiLCJkYXRhIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXN1bHQiLCJmZXRjaEdldFdpdGhpblBhZ2UiLCJwYWdlIiwiZXZhbHVhdGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZldGNoIiwiY3JlZGVudGlhbHMiLCJ0aGVuIiwiY2F0Y2giLCJlIiwiZmV0Y2hQb3N0V2l0aGluUGFnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFHQSxNQUFNQSxpQkFBaUIsR0FBRyxrQkFBMUI7O0FBRUEsU0FBU0MsY0FBVCxHQUEwQjtBQUN4QixTQUFPO0FBQ0xDLElBQUFBLE1BQU0sRUFBRUYsaUJBREg7QUFFTCxvQkFBZ0JBO0FBRlgsR0FBUDtBQUlEOztBQUVNLGVBQWVHLFFBQWYsQ0FBaUNDLEdBQWpDLEVBQ0xDLFlBREssRUFDZ0Q7QUFDckQsTUFBSUMsT0FBTyxHQUFHTCxjQUFjLEVBQTVCOztBQUNBLE1BQUlJLFlBQUosRUFBa0I7QUFDaEJDLElBQUFBLE9BQU8sR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWNGLE9BQWQsRUFBdUJELFlBQXZCLENBQVY7QUFDRDs7QUFDRCxRQUFNSSxPQUFPLEdBQUc7QUFDZEMsSUFBQUEsTUFBTSxFQUFFLEtBRE07QUFFZEosSUFBQUE7QUFGYyxHQUFoQjtBQUlBLFFBQU1LLFdBQVcsR0FBRyxNQUFNLHdCQUFVUCxHQUFWLEVBQWVLLE9BQWYsQ0FBMUI7O0FBRUEsTUFBSUUsV0FBVyxDQUFDQyxNQUFaLEtB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LENBQVA7QUFrQkQsR0FwQk0sRUFvQkozQixHQXBCSSxFQW9CQ1ksSUFwQkQsRUFvQk9YLFlBcEJQLENBQVA7QUFxQkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbm9kZUZldGNoIGZyb20gJ25vZGUtZmV0Y2gnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJ3B1cHBldGVlcic7XG5cbmNvbnN0IEpTT05fQ09OVEVOVF9UWVBFID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG5mdW5jdGlvbiBnZXRKc29uSGVhZGVycygpIHtcbiAgcmV0dXJuIHtcbiAgICBBY2NlcHQ6IEpTT05fQ09OVEVOVF9UWVBFLFxuICAgICdDb250ZW50LVR5cGUnOiBKU09OX0NPTlRFTlRfVFlQRSxcbiAgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoR2V0PFRSZXN1bHQ+KHVybDogc3RyaW5nLFxuICBleHRyYUhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBQcm9taXNlPFRSZXN1bHQ+IHtcbiAgbGV0IGhlYWRlcnMgPSBnZXRKc29uSGVhZGVycygpO1xuICBpZiAoZXh0cmFIZWFkZXJzKSB7XG4gICAgaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oaGVhZGVycywgZXh0cmFIZWFkZXJzKTtcbiAgfVxuICBjb25zdCByZXF1ZXN0ID0ge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgaGVhZGVycyxcbiAgfTtcbiAgY29uc3QgZmV0Y2hSZXN1bHQgPSBhd2FpdCBub2RlRmV0Y2godXJsLCByZXF1ZXN0KTtcblxuICBpZiAoZmV0Y2hSZXN1bHQuc3RhdHVzICE9PSAyMDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYHNlbmRpbmcgYSByZXF1ZXN0IHRvIHRoZSBpbnN0aXR1dGUgc2VydmVyIHJldHVybmVkIHdpdGggc3RhdHVzIGNvZGUgJHtmZXRjaFJlc3VsdC5zdGF0dXN9YCk7XG4gIH1cblxuICByZXR1cm4gZmV0Y2hSZXN1bHQuanNvbigpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hQb3N0KHVybDogc3RyaW5nLCBkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBleHRyYUhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIGFueT4pIHtcbiAgbGV0IGhlYWRlcnMgPSBnZXRKc29uSGVhZGVycygpO1xuICBpZiAoZXh0cmFIZWFkZXJzKSB7XG4gICAgaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oaGVhZGVycywgZXh0cmFIZWFkZXJzKTtcbiAgfVxuICBjb25zdCByZXF1ZXN0ID0ge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGhlYWRlcnMsXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gIH07XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG5vZGVGZXRjaCh1cmwsIHJlcXVlc3QpO1xuICByZXR1cm4gcmVzdWx0Lmpzb24oKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoR2V0V2l0aGluUGFnZTxUUmVzdWx0PihwYWdlOiBQYWdlLCB1cmw6IHN0cmluZyk6IFByb21pc2U8VFJlc3VsdCB8IG51bGw+IHtcbiAgcmV0dXJuIHBhZ2UuZXZhbHVhdGUoKHVybCkgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxUUmVzdWx0IHwgbnVsbD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZmV0Y2godXJsLCB7XG4gICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXG4gICAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IDIwNCkge1xuICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQuanNvbigpKTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sIHVybCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaFBvc3RXaXRoaW5QYWdlPFRSZXN1bHQ+KHBhZ2U6IFBhZ2UsIHVybDogc3RyaW5nLFxuICBkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBleHRyYUhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fSk6IFByb21pc2U8VFJlc3VsdCB8IG51bGw+IHtcbiAgcmV0dXJuIHBhZ2UuZXZhbHVhdGU8KC4uLmFyZ3M6IGFueVtdKSA9PiBQcm9taXNlPFRSZXN1bHQgfCBudWxsPj4oKHVybDogc3RyaW5nLCBkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgIGV4dHJhSGVhZGVyczogUmVjb3JkPHN0cmluZywgYW55PikgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBmZXRjaCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLW9iamVjdC1zcHJlYWRcbiAgICAgICAgaGVhZGVyczogT2JqZWN0LmFzc2lnbih7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04JyB9LCBleHRyYUhlYWRlcnMpLFxuICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSAyMDQpIHtcbiAgICAgICAgICAvLyBObyBjb250ZW50IHJlc3BvbnNlXG4gICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdC5qc29uKCkpO1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSwgdXJsLCBkYXRhLCBleHRyYUhlYWRlcnMpO1xufVxuIl19