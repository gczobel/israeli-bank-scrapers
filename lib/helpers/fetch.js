"use strict";

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchGet = fetchGet;
exports.fetchPost = fetchPost;
exports.fetchGetWithinPage = fetchGetWithinPage;
exports.fetchPostWithinPage = fetchPostWithinPage;

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const JSON_CONTENT_TYPE = 'application/json';

function getJsonHeaders() {
  return {
    Accept: JSON_CONTENT_TYPE,
    'Content-Type': JSON_CONTENT_TYPE
  };
}

async function fetchGet(url, extraHeaders) {
  let headers = getJsonHeaders();

  if (extraHeaders) {
    headers = Object.assign(headers, extraHeaders);
  }

  const request = {
    method: 'GET',
    headers
  };
  const result = await (0, _nodeFetch.default)(url, request);
  return result.json();
}

async function fetchPost(url, data, extraHeaders) {
  let headers = getJsonHeaders();

  if (extraHeaders) {
    headers = Object.assign(headers, extraHeaders);
  }

  const request = {
    method: 'POST',
    headers,
    body: JSON.stringify(data)
  };
  const result = await (0, _nodeFetch.default)(url, request);
  return result.json();
}

async function fetchGetWithinPage(page, url) {
  return page.evaluate(url => {
    return new Promise((resolve, reject) => {
      fetch(url, {
        credentials: 'include'
      }).then(result => {
        if (result.status === 204) {
          resolve(null);
        } else {
          resolve(result.json());
        }
      }).catch(e => {
        reject(e);
      });
    });
  }, url);
}

async function fetchPostWithinPage(page, url, data, extraHeaders = {}) {
  return page.evaluate((url, data, extraHeaders) => {
    return new Promise((resolve, reject) => {
      fetch(url, {
        method: 'POST',
        body: JSON.stringify(data),
        credentials: 'include',
        // eslint-disable-next-line prefer-object-spread
        headers: Object.assign({
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
        }, extraHeaders)
      }).then(result => {
        if (result.status === 204) {
          // No content response
          resolve(null);
        } else {
          resolve(result.json());
        }
      }).catch(e => {
        reject(e);
      });
    });
  }, url, data, extraHeaders);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2ZldGNoLnRzIl0sIm5hbWVzIjpbIkpTT05fQ09OVEVOVF9UWVBFIiwiZ2V0SnNvbkhlYWRlcnMiLCJBY2NlcHQiLCJmZXRjaEdldCIsInVybCIsImV4dHJhSGVhZGVycyIsImhlYWRlcnMiLCJPYmplY3QiLCJhc3NpZ24iLCJyZXF1ZXN0IiwibWV0aG9kIiwicmVzdWx0IiwianNvbiIsImZldGNoUG9zdCIsImRhdGEiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImZldGNoR2V0V2l0aGluUGFnZSIsInBhZ2UiLCJldmFsdWF0ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZmV0Y2giLCJjcmVkZW50aWFscyIsInRoZW4iLCJzdGF0dXMiLCJjYXRjaCIsImUiLCJmZXRjaFBvc3RXaXRoaW5QYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUdBLE1BQU1BLGlCQUFpQixHQUFHLGtCQUExQjs7QUFFQSxTQUFTQyxjQUFULEdBQTBCO0FBQ3hCLFNBQU87QUFDTEMsSUFBQUEsTUFBTSxFQUFFRixpQkFESDtBQUVMLG9CQUFnQkE7QUFGWCxHQUFQO0FBSUQ7O0FBRU0sZUFBZUcsUUFBZixDQUFpQ0MsR0FBakMsRUFDTEMsWUFESyxFQUNnRDtBQUNyRCxNQUFJQyxPQUFPLEdBQUdMLGNBQWMsRUFBNUI7O0FBQ0EsTUFBSUksWUFBSixFQUFrQjtBQUNoQkMsSUFBQUEsT0FBTyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0YsT0FBZCxFQUF1QkQsWUFBdkIsQ0FBVjtBQUNEOztBQUNELFFBQU1JLE9BQU8sR0FBRztBQUNkQyxJQUFBQSxNQUFNLEVBQUUsS0FETTtBQUVkSixJQUFBQTtBQUZjLEdBQWhCO0FBSUEsUUFBTUssTUFBTSxHQUFHLE1BQU0sd0JBQVVQLEdBQVYsRUFBZUssT0FBZixDQUFyQjtBQUNBLFNBQU9FLE1BQU0sQ0FBQ0MsSUFBUCxFQUFQO0FBQ0Q7O0FBRU0sZUFBZUMsU0FB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IH0gZnJvbSAncHVwcGV0ZWVyJztcblxuY29uc3QgSlNPTl9DT05URU5UX1RZUEUgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbmZ1bmN0aW9uIGdldEpzb25IZWFkZXJzKCkge1xuICByZXR1cm4ge1xuICAgIEFjY2VwdDogSlNPTl9DT05URU5UX1RZUEUsXG4gICAgJ0NvbnRlbnQtVHlwZSc6IEpTT05fQ09OVEVOVF9UWVBFLFxuICB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hHZXQ8VFJlc3VsdD4odXJsOiBzdHJpbmcsXG4gIGV4dHJhSGVhZGVyczogUmVjb3JkPHN0cmluZywgYW55Pik6IFByb21pc2U8VFJlc3VsdD4ge1xuICBsZXQgaGVhZGVycyA9IGdldEpzb25IZWFkZXJzKCk7XG4gIGlmIChleHRyYUhlYWRlcnMpIHtcbiAgICBoZWFkZXJzID0gT2JqZWN0LmFzc2lnbihoZWFkZXJzLCBleHRyYUhlYWRlcnMpO1xuICB9XG4gIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBoZWFkZXJzLFxuICB9O1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBub2RlRmV0Y2godXJsLCByZXF1ZXN0KTtcbiAgcmV0dXJuIHJlc3VsdC5qc29uKCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaFBvc3QodXJsOiBzdHJpbmcsIGRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIGV4dHJhSGVhZGVyczogUmVjb3JkPHN0cmluZywgYW55Pikge1xuICBsZXQgaGVhZGVycyA9IGdldEpzb25IZWFkZXJzKCk7XG4gIGlmIChleHRyYUhlYWRlcnMpIHtcbiAgICBoZWFkZXJzID0gT2JqZWN0LmFzc2lnbihoZWFkZXJzLCBleHRyYUhlYWRlcnMpO1xuICB9XG4gIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgaGVhZGVycyxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcbiAgfTtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbm9kZUZldGNoKHVybCwgcmVxdWVzdCk7XG4gIHJldHVybiByZXN1bHQuanNvbigpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hHZXRXaXRoaW5QYWdlPFRSZXN1bHQ+KHBhZ2U6IFBhZ2UsIHVybDogc3RyaW5nKTogUHJvbWlzZTxUUmVzdWx0IHwgbnVsbD4ge1xuICByZXR1cm4gcGFnZS5ldmFsdWF0ZSgodXJsKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFRSZXN1bHQgfCBudWxsPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBmZXRjaCh1cmwsIHtcbiAgICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyxcbiAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gMjA0KSB7XG4gICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdC5qc29uKCkpO1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSwgdXJsKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoUG9zdFdpdGhpblBhZ2U8VFJlc3VsdD4ocGFnZTogUGFnZSwgdXJsOiBzdHJpbmcsXG4gIGRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4sIGV4dHJhSGVhZGVyczogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9KTogUHJvbWlzZTxUUmVzdWx0IHwgbnVsbD4ge1xuICByZXR1cm4gcGFnZS5ldmFsdWF0ZTwoLi4uYXJnczogYW55W10pID0+IFByb21pc2U8VFJlc3VsdCB8IG51bGw+PigodXJsOiBzdHJpbmcsIGRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gICAgZXh0cmFIZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGZldGNoKHVybCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItb2JqZWN0LXNwcmVhZFxuICAgICAgICBoZWFkZXJzOiBPYmplY3QuYXNzaWduKHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgnIH0sIGV4dHJhSGVhZGVycyksXG4gICAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IDIwNCkge1xuICAgICAgICAgIC8vIE5vIGNvbnRlbnQgcmVzcG9uc2VcbiAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0Lmpzb24oKSk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LCB1cmwsIGRhdGEsIGV4dHJhSGVhZGVycyk7XG59XG4iXX0=