"use strict";

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.waitUntilElementFound = waitUntilElementFound;
exports.waitUntilElementDisappear = waitUntilElementDisappear;
exports.fillInput = fillInput;
exports.clickButton = clickButton;
exports.clickLink = clickLink;
exports.dropdownSelect = dropdownSelect;
exports.dropdownElements = dropdownElements;
exports.pageEvalAll = pageEvalAll;
exports.elementPresentOnPage = elementPresentOnPage;

async function waitUntilElementFound(page, elementSelector, onlyVisible = false, timeout = 30000) {
  await page.waitForSelector(elementSelector, {
    visible: onlyVisible,
    timeout
  });
}

async function waitUntilElementDisappear(page, elementSelector, timeout = 30000) {
  await page.waitForSelector(elementSelector, {
    hidden: true,
    timeout
  });
}

async function fillInput(page, inputSelector, inputValue) {
  await page.$eval(inputSelector, input => {
    const inputElement = input; // @ts-ignore

    inputElement.value = '';
  });
  await page.type(inputSelector, inputValue);
}

async function clickButton(page, buttonSelector) {
  await page.$eval(buttonSelector, el => el.click());
}

async function clickLink(page, aSelector) {
  await page.$eval(aSelector, el => {
    if (!el || typeof el.click === 'undefined') {
      return;
    }

    el.click();
  });
}

async function pageEvalAll(page, selector, defaultResult, callback) {
  let result = defaultResult;

  try {
    result = await page.$$eval(selector, callback);
  } catch (e) {
    // TODO temporary workaround to puppeteer@1.5.0 which breaks $$eval bevahvior until they will release a new version.
    if (e.message.indexOf('Error: failed to find elements matching selector') !== 0) {
      throw e;
    }
  }

  return result;
}

async function elementPresentOnPage(page, selector) {
  return (await page.$(selector)) !== null;
}

async function dropdownSelect(page, selectSelector, value) {
  await page.select(selectSelector, value);
}

async function dropdownElements(page, selector) {
  const options = await page.evaluate(optionSelector => {
    return Array.from(document.querySelectorAll(optionSelector)).filter(o => o.value).map(o => {
      return {
        name: o.text,
        value: o.value
      };
    });
  }, `${selector} > option`);
  return options;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2VsZW1lbnRzLWludGVyYWN0aW9ucy50cyJdLCJuYW1lcyI6WyJ3YWl0VW50aWxFbGVtZW50Rm91bmQiLCJwYWdlIiwiZWxlbWVudFNlbGVjdG9yIiwib25seVZpc2libGUiLCJ0aW1lb3V0Iiwid2FpdEZvclNlbGVjdG9yIiwidmlzaWJsZSIsIndhaXRVbnRpbEVsZW1lbnREaXNhcHBlYXIiLCJoaWRkZW4iLCJmaWxsSW5wdXQiLCJpbnB1dFNlbGVjdG9yIiwiaW5wdXRWYWx1ZSIsIiRldmFsIiwiaW5wdXQiLCJpbnB1dEVsZW1lbnQiLCJ2YWx1ZSIsInR5cGUiLCJjbGlja0J1dHRvbiIsImJ1dHRvblNlbGVjdG9yIiwiZWwiLCJjbGljayIsImNsaWNrTGluayIsImFTZWxlY3RvciIsInBhZ2VFdmFsQWxsIiwic2VsZWN0b3IiLCJkZWZhdWx0UmVzdWx0IiwiY2FsbGJhY2siLCJyZXN1bHQiLCIkJGV2YWwiLCJlIiwibWVzc2FnZSIsImluZGV4T2YiLCJlbGVtZW50UHJlc2VudE9uUGFnZSIsIiQiLCJkcm9wZG93blNlbGVjdCIsInNlbGVjdFNlbGVjdG9yIiwic2VsZWN0IiwiZHJvcGRvd25FbGVtZW50cyIsIm9wdGlvbnMiLCJldmFsdWF0ZSIsIm9wdGlvblNlbGVjdG9yIiwiQXJyYXkiLCJmcm9tIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZmlsdGVyIiwibyIsIm1hcCIsIm5hbWUiLCJ0ZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLGVBQWVBLHFCQUFmLENBQXFDQyxJQUFyQyxFQUFpREMsZUFBakQsRUFDRUMsV0FBVyxHQUFHLEtBRGhCLEVBQ3VCQyxPQUFPLEdBQUcsS0FEakMsRUFDd0M7QUFDdEMsUUFBTUgsSUFBSSxDQUFDSSxlQUFMLENBQXFCSCxlQUFyQixFQUFzQztBQUFFSSxJQUFBQSxPQUFPLEVBQUVILFdBQVg7QUFBd0JDLElBQUFBO0FBQXhCLEdBQXRDLENBQU47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QVA7QUFRRCxHQVRxQixFQVNsQixHQUFFUyxRQUFTLFdBVE8sQ0FBdEI7QUFVQSxTQUFPYyxPQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlIH0gZnJvbSAncHVwcGV0ZWVyJztcblxuYXN5bmMgZnVuY3Rpb24gd2FpdFVudGlsRWxlbWVudEZvdW5kKHBhZ2U6IFBhZ2UsIGVsZW1lbnRTZWxlY3Rvcjogc3RyaW5nLFxuICBvbmx5VmlzaWJsZSA9IGZhbHNlLCB0aW1lb3V0ID0gMzAwMDApIHtcbiAgYXdhaXQgcGFnZS53YWl0Rm9yU2VsZWN0b3IoZWxlbWVudFNlbGVjdG9yLCB7IHZpc2libGU6IG9ubHlWaXNpYmxlLCB0aW1lb3V0IH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiB3YWl0VW50aWxFbGVtZW50RGlzYXBwZWFyKHBhZ2U6IFBhZ2UsIGVsZW1lbnRTZWxlY3Rvcjogc3RyaW5nLCB0aW1lb3V0ID0gMzAwMDApIHtcbiAgYXdhaXQgcGFnZS53YWl0Rm9yU2VsZWN0b3IoZWxlbWVudFNlbGVjdG9yLCB7IGhpZGRlbjogdHJ1ZSwgdGltZW91dCB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZmlsbElucHV0KHBhZ2U6IFBhZ2UsIGlucHV0U2VsZWN0b3I6IHN0cmluZywgaW5wdXRWYWx1ZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gIGF3YWl0IHBhZ2UuJGV2YWwoaW5wdXRTZWxlY3RvciwgKGlucHV0OiBFbGVtZW50KSA9PiB7XG4gICAgY29uc3QgaW5wdXRFbGVtZW50ID0gaW5wdXQ7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlucHV0RWxlbWVudC52YWx1ZSA9ICcnO1xuICB9KTtcbiAgYXdhaXQgcGFnZS50eXBlKGlucHV0U2VsZWN0b3IsIGlucHV0VmFsdWUpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjbGlja0J1dHRvbihwYWdlOiBQYWdlLCBidXR0b25TZWxlY3Rvcjogc3RyaW5nKSB7XG4gIGF3YWl0IHBhZ2UuJGV2YWwoYnV0dG9uU2VsZWN0b3IsIChlbCkgPT4gKGVsIGFzIEhUTUxFbGVtZW50KS5jbGljaygpKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2xpY2tMaW5rKHBhZ2U6IFBhZ2UsIGFTZWxlY3Rvcjogc3RyaW5nKSB7XG4gIGF3YWl0IHBhZ2UuJGV2YWwoYVNlbGVjdG9yLCAoZWw6IGFueSkgPT4ge1xuICAgIGlmICghZWwgfHwgdHlwZW9mIGVsLmNsaWNrID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGVsLmNsaWNrKCk7XG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBwYWdlRXZhbEFsbDxSPihwYWdlOiBQYWdlLCBzZWxlY3Rvcjogc3RyaW5nLFxuICBkZWZhdWx0UmVzdWx0OiBhbnksIGNhbGxiYWNrOiAoZWxlbWVudHM6IEVsZW1lbnRbXSkgPT4gUik6IFByb21pc2U8Uj4ge1xuICBsZXQgcmVzdWx0ID0gZGVmYXVsdFJlc3VsdDtcbiAgdHJ5IHtcbiAgICByZXN1bHQgPSBhd2FpdCBwYWdlLiQkZXZhbChzZWxlY3RvciwgY2FsbGJhY2spO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gVE9ETyB0ZW1wb3Jhcnkgd29ya2Fyb3VuZCB0byBwdXBwZXRlZXJAMS41LjAgd2hpY2ggYnJlYWtzICQkZXZhbCBiZXZhaHZpb3IgdW50aWwgdGhleSB3aWxsIHJlbGVhc2UgYSBuZXcgdmVyc2lvbi5cbiAgICBpZiAoZS5tZXNzYWdlLmluZGV4T2YoJ0Vycm9yOiBmYWlsZWQgdG8gZmluZCBlbGVtZW50cyBtYXRjaGluZyBzZWxlY3RvcicpICE9PSAwKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGVsZW1lbnRQcmVzZW50T25QYWdlKHBhZ2U6IFBhZ2UsIHNlbGVjdG9yOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGF3YWl0IHBhZ2UuJChzZWxlY3RvcikgIT09IG51bGw7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRyb3Bkb3duU2VsZWN0KHBhZ2U6IFBhZ2UsIHNlbGVjdFNlbGVjdG9yOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgYXdhaXQgcGFnZS5zZWxlY3Qoc2VsZWN0U2VsZWN0b3IsIHZhbHVlKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZHJvcGRvd25FbGVtZW50cyhwYWdlOiBQYWdlLCBzZWxlY3Rvcjogc3RyaW5nKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBhd2FpdCBwYWdlLmV2YWx1YXRlKChvcHRpb25TZWxlY3RvcikgPT4ge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwob3B0aW9uU2VsZWN0b3IpKVxuICAgICAgLmZpbHRlcigobykgPT4gby52YWx1ZSlcbiAgICAgIC5tYXAoKG8pID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuYW1lOiBvLnRleHQsXG4gICAgICAgICAgdmFsdWU6IG8udmFsdWUsXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgfSwgYCR7c2VsZWN0b3J9ID4gb3B0aW9uYCk7XG4gIHJldHVybiBvcHRpb25zO1xufVxuXG5leHBvcnQge1xuICB3YWl0VW50aWxFbGVtZW50Rm91bmQsXG4gIHdhaXRVbnRpbEVsZW1lbnREaXNhcHBlYXIsXG4gIGZpbGxJbnB1dCxcbiAgY2xpY2tCdXR0b24sXG4gIGNsaWNrTGluayxcbiAgZHJvcGRvd25TZWxlY3QsXG4gIGRyb3Bkb3duRWxlbWVudHMsXG4gIHBhZ2VFdmFsQWxsLFxuICBlbGVtZW50UHJlc2VudE9uUGFnZSxcbn07XG4iXX0=